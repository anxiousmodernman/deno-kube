// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import {
    IoK8sApiAuthorizationV1LocalSubjectAccessReview,
    IoK8sApiAuthorizationV1LocalSubjectAccessReviewFromJSON,
    IoK8sApiAuthorizationV1LocalSubjectAccessReviewToJSON,
    IoK8sApiAuthorizationV1SelfSubjectAccessReview,
    IoK8sApiAuthorizationV1SelfSubjectAccessReviewFromJSON,
    IoK8sApiAuthorizationV1SelfSubjectAccessReviewToJSON,
    IoK8sApiAuthorizationV1SelfSubjectRulesReview,
    IoK8sApiAuthorizationV1SelfSubjectRulesReviewFromJSON,
    IoK8sApiAuthorizationV1SelfSubjectRulesReviewToJSON,
    IoK8sApiAuthorizationV1SubjectAccessReview,
    IoK8sApiAuthorizationV1SubjectAccessReviewFromJSON,
    IoK8sApiAuthorizationV1SubjectAccessReviewToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
} from '../models.ts';

export interface CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest {
    namespace: string;
    body: IoK8sApiAuthorizationV1LocalSubjectAccessReview;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface CreateAuthorizationV1SelfSubjectAccessReviewRequest {
    body: IoK8sApiAuthorizationV1SelfSubjectAccessReview;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface CreateAuthorizationV1SelfSubjectRulesReviewRequest {
    body: IoK8sApiAuthorizationV1SelfSubjectRulesReview;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface CreateAuthorizationV1SubjectAccessReviewRequest {
    body: IoK8sApiAuthorizationV1SubjectAccessReview;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

/**
 * no description
 */
export class AuthorizationV1Api extends runtime.BaseAPI {

    /**
     * create a LocalSubjectAccessReview
     */
    async createAuthorizationV1NamespacedLocalSubjectAccessReviewRaw(requestParameters: CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest): Promise<runtime.ApiResponse<IoK8sApiAuthorizationV1LocalSubjectAccessReview>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAuthorizationV1NamespacedLocalSubjectAccessReview.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAuthorizationV1NamespacedLocalSubjectAccessReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAuthorizationV1LocalSubjectAccessReviewToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAuthorizationV1LocalSubjectAccessReviewFromJSON(jsonValue));
    }

    /**
     * create a LocalSubjectAccessReview
     */
    async createAuthorizationV1NamespacedLocalSubjectAccessReview(requestParameters: CreateAuthorizationV1NamespacedLocalSubjectAccessReviewRequest): Promise<IoK8sApiAuthorizationV1LocalSubjectAccessReview> {
        const response = await this.createAuthorizationV1NamespacedLocalSubjectAccessReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a SelfSubjectAccessReview
     */
    async createAuthorizationV1SelfSubjectAccessReviewRaw(requestParameters: CreateAuthorizationV1SelfSubjectAccessReviewRequest): Promise<runtime.ApiResponse<IoK8sApiAuthorizationV1SelfSubjectAccessReview>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAuthorizationV1SelfSubjectAccessReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1/selfsubjectaccessreviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAuthorizationV1SelfSubjectAccessReviewToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAuthorizationV1SelfSubjectAccessReviewFromJSON(jsonValue));
    }

    /**
     * create a SelfSubjectAccessReview
     */
    async createAuthorizationV1SelfSubjectAccessReview(requestParameters: CreateAuthorizationV1SelfSubjectAccessReviewRequest): Promise<IoK8sApiAuthorizationV1SelfSubjectAccessReview> {
        const response = await this.createAuthorizationV1SelfSubjectAccessReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a SelfSubjectRulesReview
     */
    async createAuthorizationV1SelfSubjectRulesReviewRaw(requestParameters: CreateAuthorizationV1SelfSubjectRulesReviewRequest): Promise<runtime.ApiResponse<IoK8sApiAuthorizationV1SelfSubjectRulesReview>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAuthorizationV1SelfSubjectRulesReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1/selfsubjectrulesreviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAuthorizationV1SelfSubjectRulesReviewToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAuthorizationV1SelfSubjectRulesReviewFromJSON(jsonValue));
    }

    /**
     * create a SelfSubjectRulesReview
     */
    async createAuthorizationV1SelfSubjectRulesReview(requestParameters: CreateAuthorizationV1SelfSubjectRulesReviewRequest): Promise<IoK8sApiAuthorizationV1SelfSubjectRulesReview> {
        const response = await this.createAuthorizationV1SelfSubjectRulesReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a SubjectAccessReview
     */
    async createAuthorizationV1SubjectAccessReviewRaw(requestParameters: CreateAuthorizationV1SubjectAccessReviewRequest): Promise<runtime.ApiResponse<IoK8sApiAuthorizationV1SubjectAccessReview>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAuthorizationV1SubjectAccessReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1/subjectaccessreviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAuthorizationV1SubjectAccessReviewToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAuthorizationV1SubjectAccessReviewFromJSON(jsonValue));
    }

    /**
     * create a SubjectAccessReview
     */
    async createAuthorizationV1SubjectAccessReview(requestParameters: CreateAuthorizationV1SubjectAccessReviewRequest): Promise<IoK8sApiAuthorizationV1SubjectAccessReview> {
        const response = await this.createAuthorizationV1SubjectAccessReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAuthorizationV1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAuthorizationV1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getAuthorizationV1APIResourcesRaw();
        return await response.value();
    }

}
