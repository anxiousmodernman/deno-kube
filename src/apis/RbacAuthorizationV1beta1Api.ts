// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IoK8sApiRbacV1beta1ClusterRole,
    IoK8sApiRbacV1beta1ClusterRoleFromJSON,
    IoK8sApiRbacV1beta1ClusterRoleToJSON,
    IoK8sApiRbacV1beta1ClusterRoleBinding,
    IoK8sApiRbacV1beta1ClusterRoleBindingFromJSON,
    IoK8sApiRbacV1beta1ClusterRoleBindingToJSON,
    IoK8sApiRbacV1beta1ClusterRoleBindingList,
    IoK8sApiRbacV1beta1ClusterRoleBindingListFromJSON,
    IoK8sApiRbacV1beta1ClusterRoleBindingListToJSON,
    IoK8sApiRbacV1beta1ClusterRoleList,
    IoK8sApiRbacV1beta1ClusterRoleListFromJSON,
    IoK8sApiRbacV1beta1ClusterRoleListToJSON,
    IoK8sApiRbacV1beta1Role,
    IoK8sApiRbacV1beta1RoleFromJSON,
    IoK8sApiRbacV1beta1RoleToJSON,
    IoK8sApiRbacV1beta1RoleBinding,
    IoK8sApiRbacV1beta1RoleBindingFromJSON,
    IoK8sApiRbacV1beta1RoleBindingToJSON,
    IoK8sApiRbacV1beta1RoleBindingList,
    IoK8sApiRbacV1beta1RoleBindingListFromJSON,
    IoK8sApiRbacV1beta1RoleBindingListToJSON,
    IoK8sApiRbacV1beta1RoleList,
    IoK8sApiRbacV1beta1RoleListFromJSON,
    IoK8sApiRbacV1beta1RoleListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateRbacAuthorizationV1beta1ClusterRoleRequest {
    body: IoK8sApiRbacV1beta1ClusterRole;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    body: IoK8sApiRbacV1beta1ClusterRoleBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateRbacAuthorizationV1beta1NamespacedRoleRequest {
    namespace: string;
    body: IoK8sApiRbacV1beta1Role;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    namespace: string;
    body: IoK8sApiRbacV1beta1RoleBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteRbacAuthorizationV1beta1ClusterRoleRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteRbacAuthorizationV1beta1CollectionClusterRoleRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteRbacAuthorizationV1beta1NamespacedRoleRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListRbacAuthorizationV1beta1ClusterRoleRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListRbacAuthorizationV1beta1NamespacedRoleRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListRbacAuthorizationV1beta1RoleForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchRbacAuthorizationV1beta1ClusterRoleRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchRbacAuthorizationV1beta1NamespacedRoleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadRbacAuthorizationV1beta1ClusterRoleRequest {
    name: string;
    pretty?: string;
}

export interface ReadRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    name: string;
    pretty?: string;
}

export interface ReadRbacAuthorizationV1beta1NamespacedRoleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceRbacAuthorizationV1beta1ClusterRoleRequest {
    name: string;
    body: IoK8sApiRbacV1beta1ClusterRole;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    name: string;
    body: IoK8sApiRbacV1beta1ClusterRoleBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceRbacAuthorizationV1beta1NamespacedRoleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiRbacV1beta1Role;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    body: IoK8sApiRbacV1beta1RoleBinding;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchRbacAuthorizationV1beta1ClusterRoleRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1ClusterRoleBindingRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1ClusterRoleBindingListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1ClusterRoleListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1NamespacedRoleRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1NamespacedRoleBindingListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1NamespacedRoleListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchRbacAuthorizationV1beta1RoleListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * no description
 */
export class RbacAuthorizationV1beta1Api extends runtime.BaseAPI {

    /**
     * create a ClusterRole
     */
    async createRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters: CreateRbacAuthorizationV1beta1ClusterRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRole>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createRbacAuthorizationV1beta1ClusterRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterroles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiRbacV1beta1ClusterRoleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleFromJSON(jsonValue));
    }

    /**
     * create a ClusterRole
     */
    async createRbacAuthorizationV1beta1ClusterRole(requestParameters: CreateRbacAuthorizationV1beta1ClusterRoleRequest): Promise<IoK8sApiRbacV1beta1ClusterRole> {
        const response = await this.createRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a ClusterRoleBinding
     */
    async createRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters: CreateRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRoleBinding>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createRbacAuthorizationV1beta1ClusterRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiRbacV1beta1ClusterRoleBindingToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleBindingFromJSON(jsonValue));
    }

    /**
     * create a ClusterRoleBinding
     */
    async createRbacAuthorizationV1beta1ClusterRoleBinding(requestParameters: CreateRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<IoK8sApiRbacV1beta1ClusterRoleBinding> {
        const response = await this.createRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a Role
     */
    async createRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters: CreateRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1Role>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createRbacAuthorizationV1beta1NamespacedRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createRbacAuthorizationV1beta1NamespacedRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiRbacV1beta1RoleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleFromJSON(jsonValue));
    }

    /**
     * create a Role
     */
    async createRbacAuthorizationV1beta1NamespacedRole(requestParameters: CreateRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<IoK8sApiRbacV1beta1Role> {
        const response = await this.createRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a RoleBinding
     */
    async createRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters: CreateRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1RoleBinding>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiRbacV1beta1RoleBindingToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleBindingFromJSON(jsonValue));
    }

    /**
     * create a RoleBinding
     */
    async createRbacAuthorizationV1beta1NamespacedRoleBinding(requestParameters: CreateRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<IoK8sApiRbacV1beta1RoleBinding> {
        const response = await this.createRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a ClusterRole
     */
    async deleteRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters: DeleteRbacAuthorizationV1beta1ClusterRoleRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteRbacAuthorizationV1beta1ClusterRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ClusterRole
     */
    async deleteRbacAuthorizationV1beta1ClusterRole(requestParameters: DeleteRbacAuthorizationV1beta1ClusterRoleRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a ClusterRoleBinding
     */
    async deleteRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters: DeleteRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteRbacAuthorizationV1beta1ClusterRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ClusterRoleBinding
     */
    async deleteRbacAuthorizationV1beta1ClusterRoleBinding(requestParameters: DeleteRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ClusterRole
     */
    async deleteRbacAuthorizationV1beta1CollectionClusterRoleRaw(requestParameters: DeleteRbacAuthorizationV1beta1CollectionClusterRoleRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterroles`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ClusterRole
     */
    async deleteRbacAuthorizationV1beta1CollectionClusterRole(requestParameters: DeleteRbacAuthorizationV1beta1CollectionClusterRoleRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteRbacAuthorizationV1beta1CollectionClusterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ClusterRoleBinding
     */
    async deleteRbacAuthorizationV1beta1CollectionClusterRoleBindingRaw(requestParameters: DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ClusterRoleBinding
     */
    async deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(requestParameters: DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteRbacAuthorizationV1beta1CollectionClusterRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Role
     */
    async deleteRbacAuthorizationV1beta1CollectionNamespacedRoleRaw(requestParameters: DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteRbacAuthorizationV1beta1CollectionNamespacedRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Role
     */
    async deleteRbacAuthorizationV1beta1CollectionNamespacedRole(requestParameters: DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteRbacAuthorizationV1beta1CollectionNamespacedRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of RoleBinding
     */
    async deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingRaw(requestParameters: DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of RoleBinding
     */
    async deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(requestParameters: DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a Role
     */
    async deleteRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters: DeleteRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteRbacAuthorizationV1beta1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteRbacAuthorizationV1beta1NamespacedRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Role
     */
    async deleteRbacAuthorizationV1beta1NamespacedRole(requestParameters: DeleteRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a RoleBinding
     */
    async deleteRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters: DeleteRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a RoleBinding
     */
    async deleteRbacAuthorizationV1beta1NamespacedRoleBinding(requestParameters: DeleteRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getRbacAuthorizationV1beta1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getRbacAuthorizationV1beta1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getRbacAuthorizationV1beta1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind ClusterRole
     */
    async listRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters: ListRbacAuthorizationV1beta1ClusterRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRoleList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterroles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ClusterRole
     */
    async listRbacAuthorizationV1beta1ClusterRole(requestParameters: ListRbacAuthorizationV1beta1ClusterRoleRequest): Promise<IoK8sApiRbacV1beta1ClusterRoleList> {
        const response = await this.listRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ClusterRoleBinding
     */
    async listRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters: ListRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRoleBindingList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleBindingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ClusterRoleBinding
     */
    async listRbacAuthorizationV1beta1ClusterRoleBinding(requestParameters: ListRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<IoK8sApiRbacV1beta1ClusterRoleBindingList> {
        const response = await this.listRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Role
     */
    async listRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters: ListRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1RoleList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listRbacAuthorizationV1beta1NamespacedRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Role
     */
    async listRbacAuthorizationV1beta1NamespacedRole(requestParameters: ListRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<IoK8sApiRbacV1beta1RoleList> {
        const response = await this.listRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind RoleBinding
     */
    async listRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters: ListRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1RoleBindingList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleBindingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind RoleBinding
     */
    async listRbacAuthorizationV1beta1NamespacedRoleBinding(requestParameters: ListRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<IoK8sApiRbacV1beta1RoleBindingList> {
        const response = await this.listRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind RoleBinding
     */
    async listRbacAuthorizationV1beta1RoleBindingForAllNamespacesRaw(requestParameters: ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1RoleBindingList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/rolebindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleBindingListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind RoleBinding
     */
    async listRbacAuthorizationV1beta1RoleBindingForAllNamespaces(requestParameters: ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesRequest): Promise<IoK8sApiRbacV1beta1RoleBindingList> {
        const response = await this.listRbacAuthorizationV1beta1RoleBindingForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Role
     */
    async listRbacAuthorizationV1beta1RoleForAllNamespacesRaw(requestParameters: ListRbacAuthorizationV1beta1RoleForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1RoleList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Role
     */
    async listRbacAuthorizationV1beta1RoleForAllNamespaces(requestParameters: ListRbacAuthorizationV1beta1RoleForAllNamespacesRequest): Promise<IoK8sApiRbacV1beta1RoleList> {
        const response = await this.listRbacAuthorizationV1beta1RoleForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ClusterRole
     */
    async patchRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters: PatchRbacAuthorizationV1beta1ClusterRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRole>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchRbacAuthorizationV1beta1ClusterRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchRbacAuthorizationV1beta1ClusterRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleFromJSON(jsonValue));
    }

    /**
     * partially update the specified ClusterRole
     */
    async patchRbacAuthorizationV1beta1ClusterRole(requestParameters: PatchRbacAuthorizationV1beta1ClusterRoleRequest): Promise<IoK8sApiRbacV1beta1ClusterRole> {
        const response = await this.patchRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ClusterRoleBinding
     */
    async patchRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters: PatchRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchRbacAuthorizationV1beta1ClusterRoleBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchRbacAuthorizationV1beta1ClusterRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleBindingFromJSON(jsonValue));
    }

    /**
     * partially update the specified ClusterRoleBinding
     */
    async patchRbacAuthorizationV1beta1ClusterRoleBinding(requestParameters: PatchRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<IoK8sApiRbacV1beta1ClusterRoleBinding> {
        const response = await this.patchRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Role
     */
    async patchRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters: PatchRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchRbacAuthorizationV1beta1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchRbacAuthorizationV1beta1NamespacedRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchRbacAuthorizationV1beta1NamespacedRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleFromJSON(jsonValue));
    }

    /**
     * partially update the specified Role
     */
    async patchRbacAuthorizationV1beta1NamespacedRole(requestParameters: PatchRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<IoK8sApiRbacV1beta1Role> {
        const response = await this.patchRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified RoleBinding
     */
    async patchRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters: PatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleBindingFromJSON(jsonValue));
    }

    /**
     * partially update the specified RoleBinding
     */
    async patchRbacAuthorizationV1beta1NamespacedRoleBinding(requestParameters: PatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<IoK8sApiRbacV1beta1RoleBinding> {
        const response = await this.patchRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ClusterRole
     */
    async readRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters: ReadRbacAuthorizationV1beta1ClusterRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRole>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readRbacAuthorizationV1beta1ClusterRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleFromJSON(jsonValue));
    }

    /**
     * read the specified ClusterRole
     */
    async readRbacAuthorizationV1beta1ClusterRole(requestParameters: ReadRbacAuthorizationV1beta1ClusterRoleRequest): Promise<IoK8sApiRbacV1beta1ClusterRole> {
        const response = await this.readRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ClusterRoleBinding
     */
    async readRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters: ReadRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readRbacAuthorizationV1beta1ClusterRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleBindingFromJSON(jsonValue));
    }

    /**
     * read the specified ClusterRoleBinding
     */
    async readRbacAuthorizationV1beta1ClusterRoleBinding(requestParameters: ReadRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<IoK8sApiRbacV1beta1ClusterRoleBinding> {
        const response = await this.readRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Role
     */
    async readRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters: ReadRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readRbacAuthorizationV1beta1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readRbacAuthorizationV1beta1NamespacedRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleFromJSON(jsonValue));
    }

    /**
     * read the specified Role
     */
    async readRbacAuthorizationV1beta1NamespacedRole(requestParameters: ReadRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<IoK8sApiRbacV1beta1Role> {
        const response = await this.readRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified RoleBinding
     */
    async readRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters: ReadRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleBindingFromJSON(jsonValue));
    }

    /**
     * read the specified RoleBinding
     */
    async readRbacAuthorizationV1beta1NamespacedRoleBinding(requestParameters: ReadRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<IoK8sApiRbacV1beta1RoleBinding> {
        const response = await this.readRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ClusterRole
     */
    async replaceRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters: ReplaceRbacAuthorizationV1beta1ClusterRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRole>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceRbacAuthorizationV1beta1ClusterRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceRbacAuthorizationV1beta1ClusterRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiRbacV1beta1ClusterRoleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleFromJSON(jsonValue));
    }

    /**
     * replace the specified ClusterRole
     */
    async replaceRbacAuthorizationV1beta1ClusterRole(requestParameters: ReplaceRbacAuthorizationV1beta1ClusterRoleRequest): Promise<IoK8sApiRbacV1beta1ClusterRole> {
        const response = await this.replaceRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ClusterRoleBinding
     */
    async replaceRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters: ReplaceRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1ClusterRoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceRbacAuthorizationV1beta1ClusterRoleBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceRbacAuthorizationV1beta1ClusterRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiRbacV1beta1ClusterRoleBindingToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1ClusterRoleBindingFromJSON(jsonValue));
    }

    /**
     * replace the specified ClusterRoleBinding
     */
    async replaceRbacAuthorizationV1beta1ClusterRoleBinding(requestParameters: ReplaceRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<IoK8sApiRbacV1beta1ClusterRoleBinding> {
        const response = await this.replaceRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Role
     */
    async replaceRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters: ReplaceRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1Role>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceRbacAuthorizationV1beta1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceRbacAuthorizationV1beta1NamespacedRole.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceRbacAuthorizationV1beta1NamespacedRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiRbacV1beta1RoleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleFromJSON(jsonValue));
    }

    /**
     * replace the specified Role
     */
    async replaceRbacAuthorizationV1beta1NamespacedRole(requestParameters: ReplaceRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<IoK8sApiRbacV1beta1Role> {
        const response = await this.replaceRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified RoleBinding
     */
    async replaceRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters: ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApiRbacV1beta1RoleBinding>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiRbacV1beta1RoleBindingToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiRbacV1beta1RoleBindingFromJSON(jsonValue));
    }

    /**
     * replace the specified RoleBinding
     */
    async replaceRbacAuthorizationV1beta1NamespacedRoleBinding(requestParameters: ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<IoK8sApiRbacV1beta1RoleBinding> {
        const response = await this.replaceRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ClusterRole. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters: WatchRbacAuthorizationV1beta1ClusterRoleRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchRbacAuthorizationV1beta1ClusterRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ClusterRole. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchRbacAuthorizationV1beta1ClusterRole(requestParameters: WatchRbacAuthorizationV1beta1ClusterRoleRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1ClusterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ClusterRoleBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters: WatchRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchRbacAuthorizationV1beta1ClusterRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ClusterRoleBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchRbacAuthorizationV1beta1ClusterRoleBinding(requestParameters: WatchRbacAuthorizationV1beta1ClusterRoleBindingRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1ClusterRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ClusterRoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1ClusterRoleBindingListRaw(requestParameters: WatchRbacAuthorizationV1beta1ClusterRoleBindingListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ClusterRoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1ClusterRoleBindingList(requestParameters: WatchRbacAuthorizationV1beta1ClusterRoleBindingListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1ClusterRoleBindingListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ClusterRole. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1ClusterRoleListRaw(requestParameters: WatchRbacAuthorizationV1beta1ClusterRoleListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ClusterRole. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1ClusterRoleList(requestParameters: WatchRbacAuthorizationV1beta1ClusterRoleListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1ClusterRoleListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Role. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters: WatchRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchRbacAuthorizationV1beta1NamespacedRole.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchRbacAuthorizationV1beta1NamespacedRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Role. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchRbacAuthorizationV1beta1NamespacedRole(requestParameters: WatchRbacAuthorizationV1beta1NamespacedRoleRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1NamespacedRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters: WatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchRbacAuthorizationV1beta1NamespacedRoleBinding.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchRbacAuthorizationV1beta1NamespacedRoleBinding(requestParameters: WatchRbacAuthorizationV1beta1NamespacedRoleBindingRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1NamespacedRoleBindingRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1NamespacedRoleBindingListRaw(requestParameters: WatchRbacAuthorizationV1beta1NamespacedRoleBindingListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchRbacAuthorizationV1beta1NamespacedRoleBindingList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1NamespacedRoleBindingList(requestParameters: WatchRbacAuthorizationV1beta1NamespacedRoleBindingListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1NamespacedRoleBindingListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Role. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1NamespacedRoleListRaw(requestParameters: WatchRbacAuthorizationV1beta1NamespacedRoleListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchRbacAuthorizationV1beta1NamespacedRoleList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Role. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1NamespacedRoleList(requestParameters: WatchRbacAuthorizationV1beta1NamespacedRoleListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1NamespacedRoleListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesRaw(requestParameters: WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of RoleBinding. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(requestParameters: WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Role. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1RoleListForAllNamespacesRaw(requestParameters: WatchRbacAuthorizationV1beta1RoleListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/rbac.authorization.k8s.io/v1beta1/watch/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Role. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchRbacAuthorizationV1beta1RoleListForAllNamespaces(requestParameters: WatchRbacAuthorizationV1beta1RoleListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchRbacAuthorizationV1beta1RoleListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

}
