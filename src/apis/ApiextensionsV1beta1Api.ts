// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import {
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition,
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionFromJSON,
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionToJSON,
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList,
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionListFromJSON,
    IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models/index.ts';

export interface CreateApiextensionsV1beta1CustomResourceDefinitionRequest {
    body: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteApiextensionsV1beta1CustomResourceDefinitionRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListApiextensionsV1beta1CustomResourceDefinitionRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchApiextensionsV1beta1CustomResourceDefinitionRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchApiextensionsV1beta1CustomResourceDefinitionStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadApiextensionsV1beta1CustomResourceDefinitionRequest {
    name: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadApiextensionsV1beta1CustomResourceDefinitionStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceApiextensionsV1beta1CustomResourceDefinitionRequest {
    name: string;
    body: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusRequest {
    name: string;
    body: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchApiextensionsV1beta1CustomResourceDefinitionRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchApiextensionsV1beta1CustomResourceDefinitionListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * no description
 */
export class ApiextensionsV1beta1Api extends runtime.BaseAPI {

    /**
     * create a CustomResourceDefinition
     */
    async createApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters: CreateApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<runtime.ApiResponse<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApiextensionsV1beta1CustomResourceDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionFromJSON(jsonValue));
    }

    /**
     * create a CustomResourceDefinition
     */
    async createApiextensionsV1beta1CustomResourceDefinition(requestParameters: CreateApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition> {
        const response = await this.createApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of CustomResourceDefinition
     */
    async deleteApiextensionsV1beta1CollectionCustomResourceDefinitionRaw(requestParameters: DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CustomResourceDefinition
     */
    async deleteApiextensionsV1beta1CollectionCustomResourceDefinition(requestParameters: DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteApiextensionsV1beta1CollectionCustomResourceDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a CustomResourceDefinition
     */
    async deleteApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters: DeleteApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteApiextensionsV1beta1CustomResourceDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a CustomResourceDefinition
     */
    async deleteApiextensionsV1beta1CustomResourceDefinition(requestParameters: DeleteApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getApiextensionsV1beta1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getApiextensionsV1beta1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getApiextensionsV1beta1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind CustomResourceDefinition
     */
    async listApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters: ListApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<runtime.ApiResponse<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CustomResourceDefinition
     */
    async listApiextensionsV1beta1CustomResourceDefinition(requestParameters: ListApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionList> {
        const response = await this.listApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified CustomResourceDefinition
     */
    async patchApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters: PatchApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<runtime.ApiResponse<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchApiextensionsV1beta1CustomResourceDefinition.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchApiextensionsV1beta1CustomResourceDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionFromJSON(jsonValue));
    }

    /**
     * partially update the specified CustomResourceDefinition
     */
    async patchApiextensionsV1beta1CustomResourceDefinition(requestParameters: PatchApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition> {
        const response = await this.patchApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified CustomResourceDefinition
     */
    async patchApiextensionsV1beta1CustomResourceDefinitionStatusRaw(requestParameters: PatchApiextensionsV1beta1CustomResourceDefinitionStatusRequest): Promise<runtime.ApiResponse<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchApiextensionsV1beta1CustomResourceDefinitionStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchApiextensionsV1beta1CustomResourceDefinitionStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified CustomResourceDefinition
     */
    async patchApiextensionsV1beta1CustomResourceDefinitionStatus(requestParameters: PatchApiextensionsV1beta1CustomResourceDefinitionStatusRequest): Promise<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition> {
        const response = await this.patchApiextensionsV1beta1CustomResourceDefinitionStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified CustomResourceDefinition
     */
    async readApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters: ReadApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<runtime.ApiResponse<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readApiextensionsV1beta1CustomResourceDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionFromJSON(jsonValue));
    }

    /**
     * read the specified CustomResourceDefinition
     */
    async readApiextensionsV1beta1CustomResourceDefinition(requestParameters: ReadApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition> {
        const response = await this.readApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified CustomResourceDefinition
     */
    async readApiextensionsV1beta1CustomResourceDefinitionStatusRaw(requestParameters: ReadApiextensionsV1beta1CustomResourceDefinitionStatusRequest): Promise<runtime.ApiResponse<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readApiextensionsV1beta1CustomResourceDefinitionStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionFromJSON(jsonValue));
    }

    /**
     * read status of the specified CustomResourceDefinition
     */
    async readApiextensionsV1beta1CustomResourceDefinitionStatus(requestParameters: ReadApiextensionsV1beta1CustomResourceDefinitionStatusRequest): Promise<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition> {
        const response = await this.readApiextensionsV1beta1CustomResourceDefinitionStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified CustomResourceDefinition
     */
    async replaceApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters: ReplaceApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<runtime.ApiResponse<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceApiextensionsV1beta1CustomResourceDefinition.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceApiextensionsV1beta1CustomResourceDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionFromJSON(jsonValue));
    }

    /**
     * replace the specified CustomResourceDefinition
     */
    async replaceApiextensionsV1beta1CustomResourceDefinition(requestParameters: ReplaceApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition> {
        const response = await this.replaceApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified CustomResourceDefinition
     */
    async replaceApiextensionsV1beta1CustomResourceDefinitionStatusRaw(requestParameters: ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusRequest): Promise<runtime.ApiResponse<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceApiextensionsV1beta1CustomResourceDefinitionStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceApiextensionsV1beta1CustomResourceDefinitionStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionFromJSON(jsonValue));
    }

    /**
     * replace status of the specified CustomResourceDefinition
     */
    async replaceApiextensionsV1beta1CustomResourceDefinitionStatus(requestParameters: ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusRequest): Promise<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinition> {
        const response = await this.replaceApiextensionsV1beta1CustomResourceDefinitionStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind CustomResourceDefinition. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters: WatchApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchApiextensionsV1beta1CustomResourceDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind CustomResourceDefinition. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchApiextensionsV1beta1CustomResourceDefinition(requestParameters: WatchApiextensionsV1beta1CustomResourceDefinitionRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApiextensionsV1beta1CustomResourceDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of CustomResourceDefinition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApiextensionsV1beta1CustomResourceDefinitionListRaw(requestParameters: WatchApiextensionsV1beta1CustomResourceDefinitionListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of CustomResourceDefinition. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchApiextensionsV1beta1CustomResourceDefinitionList(requestParameters: WatchApiextensionsV1beta1CustomResourceDefinitionListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchApiextensionsV1beta1CustomResourceDefinitionListRaw(requestParameters);
        return await response.value();
    }

}
