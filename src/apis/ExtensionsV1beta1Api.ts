// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import {
    IoK8sApiExtensionsV1beta1DaemonSet,
    IoK8sApiExtensionsV1beta1DaemonSetFromJSON,
    IoK8sApiExtensionsV1beta1DaemonSetToJSON,
    IoK8sApiExtensionsV1beta1DaemonSetList,
    IoK8sApiExtensionsV1beta1DaemonSetListFromJSON,
    IoK8sApiExtensionsV1beta1DaemonSetListToJSON,
    IoK8sApiExtensionsV1beta1Deployment,
    IoK8sApiExtensionsV1beta1DeploymentFromJSON,
    IoK8sApiExtensionsV1beta1DeploymentToJSON,
    IoK8sApiExtensionsV1beta1DeploymentList,
    IoK8sApiExtensionsV1beta1DeploymentListFromJSON,
    IoK8sApiExtensionsV1beta1DeploymentListToJSON,
    IoK8sApiExtensionsV1beta1DeploymentRollback,
    IoK8sApiExtensionsV1beta1DeploymentRollbackFromJSON,
    IoK8sApiExtensionsV1beta1DeploymentRollbackToJSON,
    IoK8sApiExtensionsV1beta1Ingress,
    IoK8sApiExtensionsV1beta1IngressFromJSON,
    IoK8sApiExtensionsV1beta1IngressToJSON,
    IoK8sApiExtensionsV1beta1IngressList,
    IoK8sApiExtensionsV1beta1IngressListFromJSON,
    IoK8sApiExtensionsV1beta1IngressListToJSON,
    IoK8sApiExtensionsV1beta1NetworkPolicy,
    IoK8sApiExtensionsV1beta1NetworkPolicyFromJSON,
    IoK8sApiExtensionsV1beta1NetworkPolicyToJSON,
    IoK8sApiExtensionsV1beta1NetworkPolicyList,
    IoK8sApiExtensionsV1beta1NetworkPolicyListFromJSON,
    IoK8sApiExtensionsV1beta1NetworkPolicyListToJSON,
    IoK8sApiExtensionsV1beta1PodSecurityPolicy,
    IoK8sApiExtensionsV1beta1PodSecurityPolicyFromJSON,
    IoK8sApiExtensionsV1beta1PodSecurityPolicyToJSON,
    IoK8sApiExtensionsV1beta1PodSecurityPolicyList,
    IoK8sApiExtensionsV1beta1PodSecurityPolicyListFromJSON,
    IoK8sApiExtensionsV1beta1PodSecurityPolicyListToJSON,
    IoK8sApiExtensionsV1beta1ReplicaSet,
    IoK8sApiExtensionsV1beta1ReplicaSetFromJSON,
    IoK8sApiExtensionsV1beta1ReplicaSetToJSON,
    IoK8sApiExtensionsV1beta1ReplicaSetList,
    IoK8sApiExtensionsV1beta1ReplicaSetListFromJSON,
    IoK8sApiExtensionsV1beta1ReplicaSetListToJSON,
    IoK8sApiExtensionsV1beta1Scale,
    IoK8sApiExtensionsV1beta1ScaleFromJSON,
    IoK8sApiExtensionsV1beta1ScaleToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models.ts';

export interface CreateExtensionsV1beta1NamespacedDaemonSetRequest {
    namespace: string;
    body: IoK8sApiExtensionsV1beta1DaemonSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateExtensionsV1beta1NamespacedDeploymentRequest {
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateExtensionsV1beta1NamespacedDeploymentRollbackRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1DeploymentRollback;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface CreateExtensionsV1beta1NamespacedIngressRequest {
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Ingress;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateExtensionsV1beta1NamespacedNetworkPolicyRequest {
    namespace: string;
    body: IoK8sApiExtensionsV1beta1NetworkPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateExtensionsV1beta1NamespacedReplicaSetRequest {
    namespace: string;
    body: IoK8sApiExtensionsV1beta1ReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateExtensionsV1beta1PodSecurityPolicyRequest {
    body: IoK8sApiExtensionsV1beta1PodSecurityPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteExtensionsV1beta1CollectionNamespacedDaemonSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1CollectionNamespacedDeploymentRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1CollectionNamespacedIngressRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1CollectionNamespacedReplicaSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1CollectionPodSecurityPolicyRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1NamespacedIngressRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1NamespacedNetworkPolicyRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteExtensionsV1beta1PodSecurityPolicyRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListExtensionsV1beta1DaemonSetForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1DeploymentForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1IngressForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1NamespacedDaemonSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1NamespacedDeploymentRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1NamespacedIngressRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1NamespacedNetworkPolicyRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1NamespacedReplicaSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1NetworkPolicyForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1PodSecurityPolicyRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListExtensionsV1beta1ReplicaSetForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedDaemonSetStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedIngressRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedIngressStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedNetworkPolicyRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedReplicaSetScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedReplicaSetStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchExtensionsV1beta1PodSecurityPolicyRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadExtensionsV1beta1NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadExtensionsV1beta1NamespacedDaemonSetStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadExtensionsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadExtensionsV1beta1NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadExtensionsV1beta1NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadExtensionsV1beta1NamespacedIngressRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadExtensionsV1beta1NamespacedIngressStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadExtensionsV1beta1NamespacedNetworkPolicyRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadExtensionsV1beta1NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadExtensionsV1beta1NamespacedReplicaSetScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadExtensionsV1beta1NamespacedReplicaSetStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadExtensionsV1beta1PodSecurityPolicyRequest {
    name: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReplaceExtensionsV1beta1NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1DaemonSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedDaemonSetStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1DaemonSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedIngressRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Ingress;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedIngressStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Ingress;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedNetworkPolicyRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1NetworkPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1ReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedReplicaSetScaleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedReplicaSetStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1ReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiExtensionsV1beta1Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceExtensionsV1beta1PodSecurityPolicyRequest {
    name: string;
    body: IoK8sApiExtensionsV1beta1PodSecurityPolicy;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchExtensionsV1beta1DaemonSetListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1DeploymentListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1IngressListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedDaemonSetListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedDeploymentListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedIngressRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedIngressListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedNetworkPolicyRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedNetworkPolicyListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NamespacedReplicaSetListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1PodSecurityPolicyRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1PodSecurityPolicyListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchExtensionsV1beta1ReplicaSetListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * no description
 */
export class ExtensionsV1beta1Api extends runtime.BaseAPI {

    /**
     * create a DaemonSet
     */
    async createExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters: CreateExtensionsV1beta1NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSet>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createExtensionsV1beta1NamespacedDaemonSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createExtensionsV1beta1NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1DaemonSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetFromJSON(jsonValue));
    }

    /**
     * create a DaemonSet
     */
    async createExtensionsV1beta1NamespacedDaemonSet(requestParameters: CreateExtensionsV1beta1NamespacedDaemonSetRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSet> {
        const response = await this.createExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a Deployment
     */
    async createExtensionsV1beta1NamespacedDeploymentRaw(requestParameters: CreateExtensionsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Deployment>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createExtensionsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createExtensionsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * create a Deployment
     */
    async createExtensionsV1beta1NamespacedDeployment(requestParameters: CreateExtensionsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiExtensionsV1beta1Deployment> {
        const response = await this.createExtensionsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * create rollback of a Deployment
     */
    async createExtensionsV1beta1NamespacedDeploymentRollbackRaw(requestParameters: CreateExtensionsV1beta1NamespacedDeploymentRollbackRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createExtensionsV1beta1NamespacedDeploymentRollback.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createExtensionsV1beta1NamespacedDeploymentRollback.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createExtensionsV1beta1NamespacedDeploymentRollback.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1DeploymentRollbackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * create rollback of a Deployment
     */
    async createExtensionsV1beta1NamespacedDeploymentRollback(requestParameters: CreateExtensionsV1beta1NamespacedDeploymentRollbackRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.createExtensionsV1beta1NamespacedDeploymentRollbackRaw(requestParameters);
        return await response.value();
    }

    /**
     * create an Ingress
     */
    async createExtensionsV1beta1NamespacedIngressRaw(requestParameters: CreateExtensionsV1beta1NamespacedIngressRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Ingress>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createExtensionsV1beta1NamespacedIngress.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createExtensionsV1beta1NamespacedIngress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1IngressToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressFromJSON(jsonValue));
    }

    /**
     * create an Ingress
     */
    async createExtensionsV1beta1NamespacedIngress(requestParameters: CreateExtensionsV1beta1NamespacedIngressRequest): Promise<IoK8sApiExtensionsV1beta1Ingress> {
        const response = await this.createExtensionsV1beta1NamespacedIngressRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a NetworkPolicy
     */
    async createExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters: CreateExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1NetworkPolicy>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1NetworkPolicyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1NetworkPolicyFromJSON(jsonValue));
    }

    /**
     * create a NetworkPolicy
     */
    async createExtensionsV1beta1NamespacedNetworkPolicy(requestParameters: CreateExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<IoK8sApiExtensionsV1beta1NetworkPolicy> {
        const response = await this.createExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a ReplicaSet
     */
    async createExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters: CreateExtensionsV1beta1NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSet>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createExtensionsV1beta1NamespacedReplicaSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createExtensionsV1beta1NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1ReplicaSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetFromJSON(jsonValue));
    }

    /**
     * create a ReplicaSet
     */
    async createExtensionsV1beta1NamespacedReplicaSet(requestParameters: CreateExtensionsV1beta1NamespacedReplicaSetRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSet> {
        const response = await this.createExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a PodSecurityPolicy
     */
    async createExtensionsV1beta1PodSecurityPolicyRaw(requestParameters: CreateExtensionsV1beta1PodSecurityPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1PodSecurityPolicy>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createExtensionsV1beta1PodSecurityPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/podsecuritypolicies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1PodSecurityPolicyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * create a PodSecurityPolicy
     */
    async createExtensionsV1beta1PodSecurityPolicy(requestParameters: CreateExtensionsV1beta1PodSecurityPolicyRequest): Promise<IoK8sApiExtensionsV1beta1PodSecurityPolicy> {
        const response = await this.createExtensionsV1beta1PodSecurityPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of DaemonSet
     */
    async deleteExtensionsV1beta1CollectionNamespacedDaemonSetRaw(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1CollectionNamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of DaemonSet
     */
    async deleteExtensionsV1beta1CollectionNamespacedDaemonSet(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedDaemonSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1CollectionNamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Deployment
     */
    async deleteExtensionsV1beta1CollectionNamespacedDeploymentRaw(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1CollectionNamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Deployment
     */
    async deleteExtensionsV1beta1CollectionNamespacedDeployment(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1CollectionNamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Ingress
     */
    async deleteExtensionsV1beta1CollectionNamespacedIngressRaw(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedIngressRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1CollectionNamespacedIngress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Ingress
     */
    async deleteExtensionsV1beta1CollectionNamespacedIngress(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedIngressRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1CollectionNamespacedIngressRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of NetworkPolicy
     */
    async deleteExtensionsV1beta1CollectionNamespacedNetworkPolicyRaw(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of NetworkPolicy
     */
    async deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedNetworkPolicyRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1CollectionNamespacedNetworkPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ReplicaSet
     */
    async deleteExtensionsV1beta1CollectionNamespacedReplicaSetRaw(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1CollectionNamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ReplicaSet
     */
    async deleteExtensionsV1beta1CollectionNamespacedReplicaSet(requestParameters: DeleteExtensionsV1beta1CollectionNamespacedReplicaSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1CollectionNamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of PodSecurityPolicy
     */
    async deleteExtensionsV1beta1CollectionPodSecurityPolicyRaw(requestParameters: DeleteExtensionsV1beta1CollectionPodSecurityPolicyRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/podsecuritypolicies`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PodSecurityPolicy
     */
    async deleteExtensionsV1beta1CollectionPodSecurityPolicy(requestParameters: DeleteExtensionsV1beta1CollectionPodSecurityPolicyRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1CollectionPodSecurityPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a DaemonSet
     */
    async deleteExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters: DeleteExtensionsV1beta1NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteExtensionsV1beta1NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a DaemonSet
     */
    async deleteExtensionsV1beta1NamespacedDaemonSet(requestParameters: DeleteExtensionsV1beta1NamespacedDaemonSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a Deployment
     */
    async deleteExtensionsV1beta1NamespacedDeploymentRaw(requestParameters: DeleteExtensionsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteExtensionsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Deployment
     */
    async deleteExtensionsV1beta1NamespacedDeployment(requestParameters: DeleteExtensionsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete an Ingress
     */
    async deleteExtensionsV1beta1NamespacedIngressRaw(requestParameters: DeleteExtensionsV1beta1NamespacedIngressRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteExtensionsV1beta1NamespacedIngress.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1NamespacedIngress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete an Ingress
     */
    async deleteExtensionsV1beta1NamespacedIngress(requestParameters: DeleteExtensionsV1beta1NamespacedIngressRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1NamespacedIngressRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a NetworkPolicy
     */
    async deleteExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters: DeleteExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a NetworkPolicy
     */
    async deleteExtensionsV1beta1NamespacedNetworkPolicy(requestParameters: DeleteExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a ReplicaSet
     */
    async deleteExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters: DeleteExtensionsV1beta1NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteExtensionsV1beta1NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteExtensionsV1beta1NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ReplicaSet
     */
    async deleteExtensionsV1beta1NamespacedReplicaSet(requestParameters: DeleteExtensionsV1beta1NamespacedReplicaSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a PodSecurityPolicy
     */
    async deleteExtensionsV1beta1PodSecurityPolicyRaw(requestParameters: DeleteExtensionsV1beta1PodSecurityPolicyRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteExtensionsV1beta1PodSecurityPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a PodSecurityPolicy
     */
    async deleteExtensionsV1beta1PodSecurityPolicy(requestParameters: DeleteExtensionsV1beta1PodSecurityPolicyRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteExtensionsV1beta1PodSecurityPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getExtensionsV1beta1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getExtensionsV1beta1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getExtensionsV1beta1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind DaemonSet
     */
    async listExtensionsV1beta1DaemonSetForAllNamespacesRaw(requestParameters: ListExtensionsV1beta1DaemonSetForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSetList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/daemonsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind DaemonSet
     */
    async listExtensionsV1beta1DaemonSetForAllNamespaces(requestParameters: ListExtensionsV1beta1DaemonSetForAllNamespacesRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSetList> {
        const response = await this.listExtensionsV1beta1DaemonSetForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listExtensionsV1beta1DeploymentForAllNamespacesRaw(requestParameters: ListExtensionsV1beta1DeploymentForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DeploymentList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listExtensionsV1beta1DeploymentForAllNamespaces(requestParameters: ListExtensionsV1beta1DeploymentForAllNamespacesRequest): Promise<IoK8sApiExtensionsV1beta1DeploymentList> {
        const response = await this.listExtensionsV1beta1DeploymentForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Ingress
     */
    async listExtensionsV1beta1IngressForAllNamespacesRaw(requestParameters: ListExtensionsV1beta1IngressForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1IngressList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/ingresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Ingress
     */
    async listExtensionsV1beta1IngressForAllNamespaces(requestParameters: ListExtensionsV1beta1IngressForAllNamespacesRequest): Promise<IoK8sApiExtensionsV1beta1IngressList> {
        const response = await this.listExtensionsV1beta1IngressForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind DaemonSet
     */
    async listExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters: ListExtensionsV1beta1NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSetList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listExtensionsV1beta1NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind DaemonSet
     */
    async listExtensionsV1beta1NamespacedDaemonSet(requestParameters: ListExtensionsV1beta1NamespacedDaemonSetRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSetList> {
        const response = await this.listExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listExtensionsV1beta1NamespacedDeploymentRaw(requestParameters: ListExtensionsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DeploymentList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listExtensionsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listExtensionsV1beta1NamespacedDeployment(requestParameters: ListExtensionsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiExtensionsV1beta1DeploymentList> {
        const response = await this.listExtensionsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Ingress
     */
    async listExtensionsV1beta1NamespacedIngressRaw(requestParameters: ListExtensionsV1beta1NamespacedIngressRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1IngressList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listExtensionsV1beta1NamespacedIngress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Ingress
     */
    async listExtensionsV1beta1NamespacedIngress(requestParameters: ListExtensionsV1beta1NamespacedIngressRequest): Promise<IoK8sApiExtensionsV1beta1IngressList> {
        const response = await this.listExtensionsV1beta1NamespacedIngressRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind NetworkPolicy
     */
    async listExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters: ListExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1NetworkPolicyList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1NetworkPolicyListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind NetworkPolicy
     */
    async listExtensionsV1beta1NamespacedNetworkPolicy(requestParameters: ListExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<IoK8sApiExtensionsV1beta1NetworkPolicyList> {
        const response = await this.listExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ReplicaSet
     */
    async listExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters: ListExtensionsV1beta1NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSetList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listExtensionsV1beta1NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ReplicaSet
     */
    async listExtensionsV1beta1NamespacedReplicaSet(requestParameters: ListExtensionsV1beta1NamespacedReplicaSetRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSetList> {
        const response = await this.listExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind NetworkPolicy
     */
    async listExtensionsV1beta1NetworkPolicyForAllNamespacesRaw(requestParameters: ListExtensionsV1beta1NetworkPolicyForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1NetworkPolicyList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/networkpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1NetworkPolicyListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind NetworkPolicy
     */
    async listExtensionsV1beta1NetworkPolicyForAllNamespaces(requestParameters: ListExtensionsV1beta1NetworkPolicyForAllNamespacesRequest): Promise<IoK8sApiExtensionsV1beta1NetworkPolicyList> {
        const response = await this.listExtensionsV1beta1NetworkPolicyForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind PodSecurityPolicy
     */
    async listExtensionsV1beta1PodSecurityPolicyRaw(requestParameters: ListExtensionsV1beta1PodSecurityPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1PodSecurityPolicyList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/podsecuritypolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1PodSecurityPolicyListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PodSecurityPolicy
     */
    async listExtensionsV1beta1PodSecurityPolicy(requestParameters: ListExtensionsV1beta1PodSecurityPolicyRequest): Promise<IoK8sApiExtensionsV1beta1PodSecurityPolicyList> {
        const response = await this.listExtensionsV1beta1PodSecurityPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ReplicaSet
     */
    async listExtensionsV1beta1ReplicaSetForAllNamespacesRaw(requestParameters: ListExtensionsV1beta1ReplicaSetForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSetList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/replicasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ReplicaSet
     */
    async listExtensionsV1beta1ReplicaSetForAllNamespaces(requestParameters: ListExtensionsV1beta1ReplicaSetForAllNamespacesRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSetList> {
        const response = await this.listExtensionsV1beta1ReplicaSetForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified DaemonSet
     */
    async patchExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters: PatchExtensionsV1beta1NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedDaemonSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetFromJSON(jsonValue));
    }

    /**
     * partially update the specified DaemonSet
     */
    async patchExtensionsV1beta1NamespacedDaemonSet(requestParameters: PatchExtensionsV1beta1NamespacedDaemonSetRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSet> {
        const response = await this.patchExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified DaemonSet
     */
    async patchExtensionsV1beta1NamespacedDaemonSetStatusRaw(requestParameters: PatchExtensionsV1beta1NamespacedDaemonSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedDaemonSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedDaemonSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedDaemonSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified DaemonSet
     */
    async patchExtensionsV1beta1NamespacedDaemonSetStatus(requestParameters: PatchExtensionsV1beta1NamespacedDaemonSetStatusRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSet> {
        const response = await this.patchExtensionsV1beta1NamespacedDaemonSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Deployment
     */
    async patchExtensionsV1beta1NamespacedDeploymentRaw(requestParameters: PatchExtensionsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * partially update the specified Deployment
     */
    async patchExtensionsV1beta1NamespacedDeployment(requestParameters: PatchExtensionsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiExtensionsV1beta1Deployment> {
        const response = await this.patchExtensionsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update scale of the specified Deployment
     */
    async patchExtensionsV1beta1NamespacedDeploymentScaleRaw(requestParameters: PatchExtensionsV1beta1NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * partially update scale of the specified Deployment
     */
    async patchExtensionsV1beta1NamespacedDeploymentScale(requestParameters: PatchExtensionsV1beta1NamespacedDeploymentScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.patchExtensionsV1beta1NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified Deployment
     */
    async patchExtensionsV1beta1NamespacedDeploymentStatusRaw(requestParameters: PatchExtensionsV1beta1NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Deployment
     */
    async patchExtensionsV1beta1NamespacedDeploymentStatus(requestParameters: PatchExtensionsV1beta1NamespacedDeploymentStatusRequest): Promise<IoK8sApiExtensionsV1beta1Deployment> {
        const response = await this.patchExtensionsV1beta1NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Ingress
     */
    async patchExtensionsV1beta1NamespacedIngressRaw(requestParameters: PatchExtensionsV1beta1NamespacedIngressRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Ingress>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedIngress.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedIngress.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedIngress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressFromJSON(jsonValue));
    }

    /**
     * partially update the specified Ingress
     */
    async patchExtensionsV1beta1NamespacedIngress(requestParameters: PatchExtensionsV1beta1NamespacedIngressRequest): Promise<IoK8sApiExtensionsV1beta1Ingress> {
        const response = await this.patchExtensionsV1beta1NamespacedIngressRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified Ingress
     */
    async patchExtensionsV1beta1NamespacedIngressStatusRaw(requestParameters: PatchExtensionsV1beta1NamespacedIngressStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Ingress>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedIngressStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedIngressStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedIngressStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Ingress
     */
    async patchExtensionsV1beta1NamespacedIngressStatus(requestParameters: PatchExtensionsV1beta1NamespacedIngressStatusRequest): Promise<IoK8sApiExtensionsV1beta1Ingress> {
        const response = await this.patchExtensionsV1beta1NamespacedIngressStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified NetworkPolicy
     */
    async patchExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters: PatchExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1NetworkPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1NetworkPolicyFromJSON(jsonValue));
    }

    /**
     * partially update the specified NetworkPolicy
     */
    async patchExtensionsV1beta1NamespacedNetworkPolicy(requestParameters: PatchExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<IoK8sApiExtensionsV1beta1NetworkPolicy> {
        const response = await this.patchExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ReplicaSet
     */
    async patchExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters: PatchExtensionsV1beta1NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetFromJSON(jsonValue));
    }

    /**
     * partially update the specified ReplicaSet
     */
    async patchExtensionsV1beta1NamespacedReplicaSet(requestParameters: PatchExtensionsV1beta1NamespacedReplicaSetRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSet> {
        const response = await this.patchExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update scale of the specified ReplicaSet
     */
    async patchExtensionsV1beta1NamespacedReplicaSetScaleRaw(requestParameters: PatchExtensionsV1beta1NamespacedReplicaSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSetScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * partially update scale of the specified ReplicaSet
     */
    async patchExtensionsV1beta1NamespacedReplicaSetScale(requestParameters: PatchExtensionsV1beta1NamespacedReplicaSetScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.patchExtensionsV1beta1NamespacedReplicaSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified ReplicaSet
     */
    async patchExtensionsV1beta1NamespacedReplicaSetStatusRaw(requestParameters: PatchExtensionsV1beta1NamespacedReplicaSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedReplicaSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified ReplicaSet
     */
    async patchExtensionsV1beta1NamespacedReplicaSetStatus(requestParameters: PatchExtensionsV1beta1NamespacedReplicaSetStatusRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSet> {
        const response = await this.patchExtensionsV1beta1NamespacedReplicaSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update scale of the specified ReplicationControllerDummy
     */
    async patchExtensionsV1beta1NamespacedReplicationControllerDummyScaleRaw(requestParameters: PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1NamespacedReplicationControllerDummyScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchExtensionsV1beta1NamespacedReplicationControllerDummyScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1NamespacedReplicationControllerDummyScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * partially update scale of the specified ReplicationControllerDummy
     */
    async patchExtensionsV1beta1NamespacedReplicationControllerDummyScale(requestParameters: PatchExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.patchExtensionsV1beta1NamespacedReplicationControllerDummyScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified PodSecurityPolicy
     */
    async patchExtensionsV1beta1PodSecurityPolicyRaw(requestParameters: PatchExtensionsV1beta1PodSecurityPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1PodSecurityPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchExtensionsV1beta1PodSecurityPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchExtensionsV1beta1PodSecurityPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * partially update the specified PodSecurityPolicy
     */
    async patchExtensionsV1beta1PodSecurityPolicy(requestParameters: PatchExtensionsV1beta1PodSecurityPolicyRequest): Promise<IoK8sApiExtensionsV1beta1PodSecurityPolicy> {
        const response = await this.patchExtensionsV1beta1PodSecurityPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified DaemonSet
     */
    async readExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters: ReadExtensionsV1beta1NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetFromJSON(jsonValue));
    }

    /**
     * read the specified DaemonSet
     */
    async readExtensionsV1beta1NamespacedDaemonSet(requestParameters: ReadExtensionsV1beta1NamespacedDaemonSetRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSet> {
        const response = await this.readExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified DaemonSet
     */
    async readExtensionsV1beta1NamespacedDaemonSetStatusRaw(requestParameters: ReadExtensionsV1beta1NamespacedDaemonSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedDaemonSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedDaemonSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetFromJSON(jsonValue));
    }

    /**
     * read status of the specified DaemonSet
     */
    async readExtensionsV1beta1NamespacedDaemonSetStatus(requestParameters: ReadExtensionsV1beta1NamespacedDaemonSetStatusRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSet> {
        const response = await this.readExtensionsV1beta1NamespacedDaemonSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Deployment
     */
    async readExtensionsV1beta1NamespacedDeploymentRaw(requestParameters: ReadExtensionsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * read the specified Deployment
     */
    async readExtensionsV1beta1NamespacedDeployment(requestParameters: ReadExtensionsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiExtensionsV1beta1Deployment> {
        const response = await this.readExtensionsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * read scale of the specified Deployment
     */
    async readExtensionsV1beta1NamespacedDeploymentScaleRaw(requestParameters: ReadExtensionsV1beta1NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * read scale of the specified Deployment
     */
    async readExtensionsV1beta1NamespacedDeploymentScale(requestParameters: ReadExtensionsV1beta1NamespacedDeploymentScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.readExtensionsV1beta1NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified Deployment
     */
    async readExtensionsV1beta1NamespacedDeploymentStatusRaw(requestParameters: ReadExtensionsV1beta1NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * read status of the specified Deployment
     */
    async readExtensionsV1beta1NamespacedDeploymentStatus(requestParameters: ReadExtensionsV1beta1NamespacedDeploymentStatusRequest): Promise<IoK8sApiExtensionsV1beta1Deployment> {
        const response = await this.readExtensionsV1beta1NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Ingress
     */
    async readExtensionsV1beta1NamespacedIngressRaw(requestParameters: ReadExtensionsV1beta1NamespacedIngressRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Ingress>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedIngress.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedIngress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressFromJSON(jsonValue));
    }

    /**
     * read the specified Ingress
     */
    async readExtensionsV1beta1NamespacedIngress(requestParameters: ReadExtensionsV1beta1NamespacedIngressRequest): Promise<IoK8sApiExtensionsV1beta1Ingress> {
        const response = await this.readExtensionsV1beta1NamespacedIngressRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified Ingress
     */
    async readExtensionsV1beta1NamespacedIngressStatusRaw(requestParameters: ReadExtensionsV1beta1NamespacedIngressStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Ingress>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedIngressStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedIngressStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressFromJSON(jsonValue));
    }

    /**
     * read status of the specified Ingress
     */
    async readExtensionsV1beta1NamespacedIngressStatus(requestParameters: ReadExtensionsV1beta1NamespacedIngressStatusRequest): Promise<IoK8sApiExtensionsV1beta1Ingress> {
        const response = await this.readExtensionsV1beta1NamespacedIngressStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified NetworkPolicy
     */
    async readExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters: ReadExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1NetworkPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1NetworkPolicyFromJSON(jsonValue));
    }

    /**
     * read the specified NetworkPolicy
     */
    async readExtensionsV1beta1NamespacedNetworkPolicy(requestParameters: ReadExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<IoK8sApiExtensionsV1beta1NetworkPolicy> {
        const response = await this.readExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ReplicaSet
     */
    async readExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters: ReadExtensionsV1beta1NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetFromJSON(jsonValue));
    }

    /**
     * read the specified ReplicaSet
     */
    async readExtensionsV1beta1NamespacedReplicaSet(requestParameters: ReadExtensionsV1beta1NamespacedReplicaSetRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSet> {
        const response = await this.readExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * read scale of the specified ReplicaSet
     */
    async readExtensionsV1beta1NamespacedReplicaSetScaleRaw(requestParameters: ReadExtensionsV1beta1NamespacedReplicaSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedReplicaSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedReplicaSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * read scale of the specified ReplicaSet
     */
    async readExtensionsV1beta1NamespacedReplicaSetScale(requestParameters: ReadExtensionsV1beta1NamespacedReplicaSetScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.readExtensionsV1beta1NamespacedReplicaSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified ReplicaSet
     */
    async readExtensionsV1beta1NamespacedReplicaSetStatusRaw(requestParameters: ReadExtensionsV1beta1NamespacedReplicaSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedReplicaSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedReplicaSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetFromJSON(jsonValue));
    }

    /**
     * read status of the specified ReplicaSet
     */
    async readExtensionsV1beta1NamespacedReplicaSetStatus(requestParameters: ReadExtensionsV1beta1NamespacedReplicaSetStatusRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSet> {
        const response = await this.readExtensionsV1beta1NamespacedReplicaSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read scale of the specified ReplicationControllerDummy
     */
    async readExtensionsV1beta1NamespacedReplicationControllerDummyScaleRaw(requestParameters: ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1NamespacedReplicationControllerDummyScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readExtensionsV1beta1NamespacedReplicationControllerDummyScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * read scale of the specified ReplicationControllerDummy
     */
    async readExtensionsV1beta1NamespacedReplicationControllerDummyScale(requestParameters: ReadExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.readExtensionsV1beta1NamespacedReplicationControllerDummyScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified PodSecurityPolicy
     */
    async readExtensionsV1beta1PodSecurityPolicyRaw(requestParameters: ReadExtensionsV1beta1PodSecurityPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1PodSecurityPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readExtensionsV1beta1PodSecurityPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * read the specified PodSecurityPolicy
     */
    async readExtensionsV1beta1PodSecurityPolicy(requestParameters: ReadExtensionsV1beta1PodSecurityPolicyRequest): Promise<IoK8sApiExtensionsV1beta1PodSecurityPolicy> {
        const response = await this.readExtensionsV1beta1PodSecurityPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified DaemonSet
     */
    async replaceExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedDaemonSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1DaemonSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetFromJSON(jsonValue));
    }

    /**
     * replace the specified DaemonSet
     */
    async replaceExtensionsV1beta1NamespacedDaemonSet(requestParameters: ReplaceExtensionsV1beta1NamespacedDaemonSetRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSet> {
        const response = await this.replaceExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified DaemonSet
     */
    async replaceExtensionsV1beta1NamespacedDaemonSetStatusRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedDaemonSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedDaemonSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedDaemonSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedDaemonSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1DaemonSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DaemonSetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified DaemonSet
     */
    async replaceExtensionsV1beta1NamespacedDaemonSetStatus(requestParameters: ReplaceExtensionsV1beta1NamespacedDaemonSetStatusRequest): Promise<IoK8sApiExtensionsV1beta1DaemonSet> {
        const response = await this.replaceExtensionsV1beta1NamespacedDaemonSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Deployment
     */
    async replaceExtensionsV1beta1NamespacedDeploymentRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * replace the specified Deployment
     */
    async replaceExtensionsV1beta1NamespacedDeployment(requestParameters: ReplaceExtensionsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiExtensionsV1beta1Deployment> {
        const response = await this.replaceExtensionsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace scale of the specified Deployment
     */
    async replaceExtensionsV1beta1NamespacedDeploymentScaleRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1ScaleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * replace scale of the specified Deployment
     */
    async replaceExtensionsV1beta1NamespacedDeploymentScale(requestParameters: ReplaceExtensionsV1beta1NamespacedDeploymentScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.replaceExtensionsV1beta1NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified Deployment
     */
    async replaceExtensionsV1beta1NamespacedDeploymentStatusRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Deployment
     */
    async replaceExtensionsV1beta1NamespacedDeploymentStatus(requestParameters: ReplaceExtensionsV1beta1NamespacedDeploymentStatusRequest): Promise<IoK8sApiExtensionsV1beta1Deployment> {
        const response = await this.replaceExtensionsV1beta1NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Ingress
     */
    async replaceExtensionsV1beta1NamespacedIngressRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedIngressRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Ingress>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedIngress.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedIngress.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedIngress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1IngressToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressFromJSON(jsonValue));
    }

    /**
     * replace the specified Ingress
     */
    async replaceExtensionsV1beta1NamespacedIngress(requestParameters: ReplaceExtensionsV1beta1NamespacedIngressRequest): Promise<IoK8sApiExtensionsV1beta1Ingress> {
        const response = await this.replaceExtensionsV1beta1NamespacedIngressRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified Ingress
     */
    async replaceExtensionsV1beta1NamespacedIngressStatusRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedIngressStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Ingress>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedIngressStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedIngressStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedIngressStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1IngressToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1IngressFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Ingress
     */
    async replaceExtensionsV1beta1NamespacedIngressStatus(requestParameters: ReplaceExtensionsV1beta1NamespacedIngressStatusRequest): Promise<IoK8sApiExtensionsV1beta1Ingress> {
        const response = await this.replaceExtensionsV1beta1NamespacedIngressStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified NetworkPolicy
     */
    async replaceExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1NetworkPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1NetworkPolicyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1NetworkPolicyFromJSON(jsonValue));
    }

    /**
     * replace the specified NetworkPolicy
     */
    async replaceExtensionsV1beta1NamespacedNetworkPolicy(requestParameters: ReplaceExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<IoK8sApiExtensionsV1beta1NetworkPolicy> {
        const response = await this.replaceExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ReplicaSet
     */
    async replaceExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1ReplicaSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetFromJSON(jsonValue));
    }

    /**
     * replace the specified ReplicaSet
     */
    async replaceExtensionsV1beta1NamespacedReplicaSet(requestParameters: ReplaceExtensionsV1beta1NamespacedReplicaSetRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSet> {
        const response = await this.replaceExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace scale of the specified ReplicaSet
     */
    async replaceExtensionsV1beta1NamespacedReplicaSetScaleRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedReplicaSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSetScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1ScaleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * replace scale of the specified ReplicaSet
     */
    async replaceExtensionsV1beta1NamespacedReplicaSetScale(requestParameters: ReplaceExtensionsV1beta1NamespacedReplicaSetScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.replaceExtensionsV1beta1NamespacedReplicaSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified ReplicaSet
     */
    async replaceExtensionsV1beta1NamespacedReplicaSetStatusRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedReplicaSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicaSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1ReplicaSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ReplicaSetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified ReplicaSet
     */
    async replaceExtensionsV1beta1NamespacedReplicaSetStatus(requestParameters: ReplaceExtensionsV1beta1NamespacedReplicaSetStatusRequest): Promise<IoK8sApiExtensionsV1beta1ReplicaSet> {
        const response = await this.replaceExtensionsV1beta1NamespacedReplicaSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace scale of the specified ReplicationControllerDummy
     */
    async replaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleRaw(requestParameters: ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1ScaleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * replace scale of the specified ReplicationControllerDummy
     */
    async replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale(requestParameters: ReplaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleRequest): Promise<IoK8sApiExtensionsV1beta1Scale> {
        const response = await this.replaceExtensionsV1beta1NamespacedReplicationControllerDummyScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified PodSecurityPolicy
     */
    async replaceExtensionsV1beta1PodSecurityPolicyRaw(requestParameters: ReplaceExtensionsV1beta1PodSecurityPolicyRequest): Promise<runtime.ApiResponse<IoK8sApiExtensionsV1beta1PodSecurityPolicy>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceExtensionsV1beta1PodSecurityPolicy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceExtensionsV1beta1PodSecurityPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiExtensionsV1beta1PodSecurityPolicyToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiExtensionsV1beta1PodSecurityPolicyFromJSON(jsonValue));
    }

    /**
     * replace the specified PodSecurityPolicy
     */
    async replaceExtensionsV1beta1PodSecurityPolicy(requestParameters: ReplaceExtensionsV1beta1PodSecurityPolicyRequest): Promise<IoK8sApiExtensionsV1beta1PodSecurityPolicy> {
        const response = await this.replaceExtensionsV1beta1PodSecurityPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1DaemonSetListForAllNamespacesRaw(requestParameters: WatchExtensionsV1beta1DaemonSetListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/daemonsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1DaemonSetListForAllNamespaces(requestParameters: WatchExtensionsV1beta1DaemonSetListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1DaemonSetListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1DeploymentListForAllNamespacesRaw(requestParameters: WatchExtensionsV1beta1DeploymentListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1DeploymentListForAllNamespaces(requestParameters: WatchExtensionsV1beta1DeploymentListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1DeploymentListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Ingress. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1IngressListForAllNamespacesRaw(requestParameters: WatchExtensionsV1beta1IngressListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/ingresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Ingress. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1IngressListForAllNamespaces(requestParameters: WatchExtensionsV1beta1IngressListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1IngressListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters: WatchExtensionsV1beta1NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchExtensionsV1beta1NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedDaemonSet(requestParameters: WatchExtensionsV1beta1NamespacedDaemonSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedDaemonSetListRaw(requestParameters: WatchExtensionsV1beta1NamespacedDaemonSetListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedDaemonSetList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedDaemonSetList(requestParameters: WatchExtensionsV1beta1NamespacedDaemonSetListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedDaemonSetListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Deployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedDeploymentRaw(requestParameters: WatchExtensionsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchExtensionsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Deployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedDeployment(requestParameters: WatchExtensionsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedDeploymentListRaw(requestParameters: WatchExtensionsV1beta1NamespacedDeploymentListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedDeploymentList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedDeploymentList(requestParameters: WatchExtensionsV1beta1NamespacedDeploymentListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedDeploymentListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Ingress. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedIngressRaw(requestParameters: WatchExtensionsV1beta1NamespacedIngressRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchExtensionsV1beta1NamespacedIngress.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedIngress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Ingress. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedIngress(requestParameters: WatchExtensionsV1beta1NamespacedIngressRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedIngressRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Ingress. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedIngressListRaw(requestParameters: WatchExtensionsV1beta1NamespacedIngressListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedIngressList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Ingress. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedIngressList(requestParameters: WatchExtensionsV1beta1NamespacedIngressListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedIngressListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind NetworkPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters: WatchExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedNetworkPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind NetworkPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedNetworkPolicy(requestParameters: WatchExtensionsV1beta1NamespacedNetworkPolicyRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedNetworkPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of NetworkPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedNetworkPolicyListRaw(requestParameters: WatchExtensionsV1beta1NamespacedNetworkPolicyListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedNetworkPolicyList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of NetworkPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedNetworkPolicyList(requestParameters: WatchExtensionsV1beta1NamespacedNetworkPolicyListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedNetworkPolicyListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters: WatchExtensionsV1beta1NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchExtensionsV1beta1NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1NamespacedReplicaSet(requestParameters: WatchExtensionsV1beta1NamespacedReplicaSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedReplicaSetListRaw(requestParameters: WatchExtensionsV1beta1NamespacedReplicaSetListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchExtensionsV1beta1NamespacedReplicaSetList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NamespacedReplicaSetList(requestParameters: WatchExtensionsV1beta1NamespacedReplicaSetListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NamespacedReplicaSetListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of NetworkPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NetworkPolicyListForAllNamespacesRaw(requestParameters: WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/networkpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of NetworkPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1NetworkPolicyListForAllNamespaces(requestParameters: WatchExtensionsV1beta1NetworkPolicyListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1NetworkPolicyListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind PodSecurityPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1PodSecurityPolicyRaw(requestParameters: WatchExtensionsV1beta1PodSecurityPolicyRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchExtensionsV1beta1PodSecurityPolicy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/podsecuritypolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind PodSecurityPolicy. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchExtensionsV1beta1PodSecurityPolicy(requestParameters: WatchExtensionsV1beta1PodSecurityPolicyRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1PodSecurityPolicyRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of PodSecurityPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1PodSecurityPolicyListRaw(requestParameters: WatchExtensionsV1beta1PodSecurityPolicyListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/podsecuritypolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of PodSecurityPolicy. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1PodSecurityPolicyList(requestParameters: WatchExtensionsV1beta1PodSecurityPolicyListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1PodSecurityPolicyListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1ReplicaSetListForAllNamespacesRaw(requestParameters: WatchExtensionsV1beta1ReplicaSetListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/extensions/v1beta1/watch/replicasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchExtensionsV1beta1ReplicaSetListForAllNamespaces(requestParameters: WatchExtensionsV1beta1ReplicaSetListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchExtensionsV1beta1ReplicaSetListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

}
