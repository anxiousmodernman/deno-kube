// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import {
    IoK8sApiAppsV1beta1ControllerRevision,
    IoK8sApiAppsV1beta1ControllerRevisionFromJSON,
    IoK8sApiAppsV1beta1ControllerRevisionToJSON,
    IoK8sApiAppsV1beta1ControllerRevisionList,
    IoK8sApiAppsV1beta1ControllerRevisionListFromJSON,
    IoK8sApiAppsV1beta1ControllerRevisionListToJSON,
    IoK8sApiAppsV1beta1Deployment,
    IoK8sApiAppsV1beta1DeploymentFromJSON,
    IoK8sApiAppsV1beta1DeploymentToJSON,
    IoK8sApiAppsV1beta1DeploymentList,
    IoK8sApiAppsV1beta1DeploymentListFromJSON,
    IoK8sApiAppsV1beta1DeploymentListToJSON,
    IoK8sApiAppsV1beta1DeploymentRollback,
    IoK8sApiAppsV1beta1DeploymentRollbackFromJSON,
    IoK8sApiAppsV1beta1DeploymentRollbackToJSON,
    IoK8sApiAppsV1beta1Scale,
    IoK8sApiAppsV1beta1ScaleFromJSON,
    IoK8sApiAppsV1beta1ScaleToJSON,
    IoK8sApiAppsV1beta1StatefulSet,
    IoK8sApiAppsV1beta1StatefulSetFromJSON,
    IoK8sApiAppsV1beta1StatefulSetToJSON,
    IoK8sApiAppsV1beta1StatefulSetList,
    IoK8sApiAppsV1beta1StatefulSetListFromJSON,
    IoK8sApiAppsV1beta1StatefulSetListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models/index.ts';

export interface CreateAppsV1beta1NamespacedControllerRevisionRequest {
    namespace: string;
    body: IoK8sApiAppsV1beta1ControllerRevision;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAppsV1beta1NamespacedDeploymentRequest {
    namespace: string;
    body: IoK8sApiAppsV1beta1Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAppsV1beta1NamespacedDeploymentRollbackRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta1DeploymentRollback;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface CreateAppsV1beta1NamespacedStatefulSetRequest {
    namespace: string;
    body: IoK8sApiAppsV1beta1StatefulSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteAppsV1beta1CollectionNamespacedControllerRevisionRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta1CollectionNamespacedDeploymentRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta1CollectionNamespacedStatefulSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta1NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta1NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListAppsV1beta1ControllerRevisionForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta1DeploymentForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta1NamespacedControllerRevisionRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta1NamespacedDeploymentRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta1NamespacedStatefulSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta1StatefulSetForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchAppsV1beta1NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta1NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta1NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta1NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta1NamespacedStatefulSetScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta1NamespacedStatefulSetStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadAppsV1beta1NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAppsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAppsV1beta1NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta1NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta1NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAppsV1beta1NamespacedStatefulSetScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta1NamespacedStatefulSetStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceAppsV1beta1NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta1ControllerRevision;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta1Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta1NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta1Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta1NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta1Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta1NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta1StatefulSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta1NamespacedStatefulSetScaleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta1Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta1NamespacedStatefulSetStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta1StatefulSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchAppsV1beta1ControllerRevisionListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta1DeploymentListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta1NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta1NamespacedControllerRevisionListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta1NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta1NamespacedDeploymentListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta1NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta1NamespacedStatefulSetListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta1StatefulSetListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * no description
 */
export class AppsV1beta1Api extends runtime.BaseAPI {

    /**
     * create a ControllerRevision
     */
    async createAppsV1beta1NamespacedControllerRevisionRaw(requestParameters: CreateAppsV1beta1NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1ControllerRevision>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta1NamespacedControllerRevision.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta1NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1ControllerRevisionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ControllerRevisionFromJSON(jsonValue));
    }

    /**
     * create a ControllerRevision
     */
    async createAppsV1beta1NamespacedControllerRevision(requestParameters: CreateAppsV1beta1NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta1ControllerRevision> {
        const response = await this.createAppsV1beta1NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a Deployment
     */
    async createAppsV1beta1NamespacedDeploymentRaw(requestParameters: CreateAppsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Deployment>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * create a Deployment
     */
    async createAppsV1beta1NamespacedDeployment(requestParameters: CreateAppsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta1Deployment> {
        const response = await this.createAppsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * create rollback of a Deployment
     */
    async createAppsV1beta1NamespacedDeploymentRollbackRaw(requestParameters: CreateAppsV1beta1NamespacedDeploymentRollbackRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createAppsV1beta1NamespacedDeploymentRollback.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta1NamespacedDeploymentRollback.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta1NamespacedDeploymentRollback.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1DeploymentRollbackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * create rollback of a Deployment
     */
    async createAppsV1beta1NamespacedDeploymentRollback(requestParameters: CreateAppsV1beta1NamespacedDeploymentRollbackRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.createAppsV1beta1NamespacedDeploymentRollbackRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a StatefulSet
     */
    async createAppsV1beta1NamespacedStatefulSetRaw(requestParameters: CreateAppsV1beta1NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSet>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta1NamespacedStatefulSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta1NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1StatefulSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetFromJSON(jsonValue));
    }

    /**
     * create a StatefulSet
     */
    async createAppsV1beta1NamespacedStatefulSet(requestParameters: CreateAppsV1beta1NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta1StatefulSet> {
        const response = await this.createAppsV1beta1NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ControllerRevision
     */
    async deleteAppsV1beta1CollectionNamespacedControllerRevisionRaw(requestParameters: DeleteAppsV1beta1CollectionNamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta1CollectionNamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ControllerRevision
     */
    async deleteAppsV1beta1CollectionNamespacedControllerRevision(requestParameters: DeleteAppsV1beta1CollectionNamespacedControllerRevisionRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta1CollectionNamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Deployment
     */
    async deleteAppsV1beta1CollectionNamespacedDeploymentRaw(requestParameters: DeleteAppsV1beta1CollectionNamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta1CollectionNamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Deployment
     */
    async deleteAppsV1beta1CollectionNamespacedDeployment(requestParameters: DeleteAppsV1beta1CollectionNamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta1CollectionNamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of StatefulSet
     */
    async deleteAppsV1beta1CollectionNamespacedStatefulSetRaw(requestParameters: DeleteAppsV1beta1CollectionNamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta1CollectionNamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of StatefulSet
     */
    async deleteAppsV1beta1CollectionNamespacedStatefulSet(requestParameters: DeleteAppsV1beta1CollectionNamespacedStatefulSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta1CollectionNamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a ControllerRevision
     */
    async deleteAppsV1beta1NamespacedControllerRevisionRaw(requestParameters: DeleteAppsV1beta1NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAppsV1beta1NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta1NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ControllerRevision
     */
    async deleteAppsV1beta1NamespacedControllerRevision(requestParameters: DeleteAppsV1beta1NamespacedControllerRevisionRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta1NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a Deployment
     */
    async deleteAppsV1beta1NamespacedDeploymentRaw(requestParameters: DeleteAppsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAppsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Deployment
     */
    async deleteAppsV1beta1NamespacedDeployment(requestParameters: DeleteAppsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a StatefulSet
     */
    async deleteAppsV1beta1NamespacedStatefulSetRaw(requestParameters: DeleteAppsV1beta1NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAppsV1beta1NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta1NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a StatefulSet
     */
    async deleteAppsV1beta1NamespacedStatefulSet(requestParameters: DeleteAppsV1beta1NamespacedStatefulSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta1NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAppsV1beta1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAppsV1beta1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getAppsV1beta1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind ControllerRevision
     */
    async listAppsV1beta1ControllerRevisionForAllNamespacesRaw(requestParameters: ListAppsV1beta1ControllerRevisionForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1ControllerRevisionList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/controllerrevisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ControllerRevisionListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ControllerRevision
     */
    async listAppsV1beta1ControllerRevisionForAllNamespaces(requestParameters: ListAppsV1beta1ControllerRevisionForAllNamespacesRequest): Promise<IoK8sApiAppsV1beta1ControllerRevisionList> {
        const response = await this.listAppsV1beta1ControllerRevisionForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listAppsV1beta1DeploymentForAllNamespacesRaw(requestParameters: ListAppsV1beta1DeploymentForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1DeploymentList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listAppsV1beta1DeploymentForAllNamespaces(requestParameters: ListAppsV1beta1DeploymentForAllNamespacesRequest): Promise<IoK8sApiAppsV1beta1DeploymentList> {
        const response = await this.listAppsV1beta1DeploymentForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ControllerRevision
     */
    async listAppsV1beta1NamespacedControllerRevisionRaw(requestParameters: ListAppsV1beta1NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1ControllerRevisionList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAppsV1beta1NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ControllerRevisionListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ControllerRevision
     */
    async listAppsV1beta1NamespacedControllerRevision(requestParameters: ListAppsV1beta1NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta1ControllerRevisionList> {
        const response = await this.listAppsV1beta1NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listAppsV1beta1NamespacedDeploymentRaw(requestParameters: ListAppsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1DeploymentList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAppsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listAppsV1beta1NamespacedDeployment(requestParameters: ListAppsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta1DeploymentList> {
        const response = await this.listAppsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind StatefulSet
     */
    async listAppsV1beta1NamespacedStatefulSetRaw(requestParameters: ListAppsV1beta1NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSetList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAppsV1beta1NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind StatefulSet
     */
    async listAppsV1beta1NamespacedStatefulSet(requestParameters: ListAppsV1beta1NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta1StatefulSetList> {
        const response = await this.listAppsV1beta1NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind StatefulSet
     */
    async listAppsV1beta1StatefulSetForAllNamespacesRaw(requestParameters: ListAppsV1beta1StatefulSetForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSetList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/statefulsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind StatefulSet
     */
    async listAppsV1beta1StatefulSetForAllNamespaces(requestParameters: ListAppsV1beta1StatefulSetForAllNamespacesRequest): Promise<IoK8sApiAppsV1beta1StatefulSetList> {
        const response = await this.listAppsV1beta1StatefulSetForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ControllerRevision
     */
    async patchAppsV1beta1NamespacedControllerRevisionRaw(requestParameters: PatchAppsV1beta1NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1ControllerRevision>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta1NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta1NamespacedControllerRevision.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta1NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ControllerRevisionFromJSON(jsonValue));
    }

    /**
     * partially update the specified ControllerRevision
     */
    async patchAppsV1beta1NamespacedControllerRevision(requestParameters: PatchAppsV1beta1NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta1ControllerRevision> {
        const response = await this.patchAppsV1beta1NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Deployment
     */
    async patchAppsV1beta1NamespacedDeploymentRaw(requestParameters: PatchAppsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * partially update the specified Deployment
     */
    async patchAppsV1beta1NamespacedDeployment(requestParameters: PatchAppsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta1Deployment> {
        const response = await this.patchAppsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update scale of the specified Deployment
     */
    async patchAppsV1beta1NamespacedDeploymentScaleRaw(requestParameters: PatchAppsV1beta1NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta1NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * partially update scale of the specified Deployment
     */
    async patchAppsV1beta1NamespacedDeploymentScale(requestParameters: PatchAppsV1beta1NamespacedDeploymentScaleRequest): Promise<IoK8sApiAppsV1beta1Scale> {
        const response = await this.patchAppsV1beta1NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified Deployment
     */
    async patchAppsV1beta1NamespacedDeploymentStatusRaw(requestParameters: PatchAppsV1beta1NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta1NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Deployment
     */
    async patchAppsV1beta1NamespacedDeploymentStatus(requestParameters: PatchAppsV1beta1NamespacedDeploymentStatusRequest): Promise<IoK8sApiAppsV1beta1Deployment> {
        const response = await this.patchAppsV1beta1NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified StatefulSet
     */
    async patchAppsV1beta1NamespacedStatefulSetRaw(requestParameters: PatchAppsV1beta1NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta1NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta1NamespacedStatefulSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta1NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetFromJSON(jsonValue));
    }

    /**
     * partially update the specified StatefulSet
     */
    async patchAppsV1beta1NamespacedStatefulSet(requestParameters: PatchAppsV1beta1NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta1StatefulSet> {
        const response = await this.patchAppsV1beta1NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update scale of the specified StatefulSet
     */
    async patchAppsV1beta1NamespacedStatefulSetScaleRaw(requestParameters: PatchAppsV1beta1NamespacedStatefulSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta1NamespacedStatefulSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta1NamespacedStatefulSetScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta1NamespacedStatefulSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * partially update scale of the specified StatefulSet
     */
    async patchAppsV1beta1NamespacedStatefulSetScale(requestParameters: PatchAppsV1beta1NamespacedStatefulSetScaleRequest): Promise<IoK8sApiAppsV1beta1Scale> {
        const response = await this.patchAppsV1beta1NamespacedStatefulSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified StatefulSet
     */
    async patchAppsV1beta1NamespacedStatefulSetStatusRaw(requestParameters: PatchAppsV1beta1NamespacedStatefulSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta1NamespacedStatefulSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta1NamespacedStatefulSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta1NamespacedStatefulSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified StatefulSet
     */
    async patchAppsV1beta1NamespacedStatefulSetStatus(requestParameters: PatchAppsV1beta1NamespacedStatefulSetStatusRequest): Promise<IoK8sApiAppsV1beta1StatefulSet> {
        const response = await this.patchAppsV1beta1NamespacedStatefulSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ControllerRevision
     */
    async readAppsV1beta1NamespacedControllerRevisionRaw(requestParameters: ReadAppsV1beta1NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1ControllerRevision>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta1NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta1NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ControllerRevisionFromJSON(jsonValue));
    }

    /**
     * read the specified ControllerRevision
     */
    async readAppsV1beta1NamespacedControllerRevision(requestParameters: ReadAppsV1beta1NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta1ControllerRevision> {
        const response = await this.readAppsV1beta1NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Deployment
     */
    async readAppsV1beta1NamespacedDeploymentRaw(requestParameters: ReadAppsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * read the specified Deployment
     */
    async readAppsV1beta1NamespacedDeployment(requestParameters: ReadAppsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta1Deployment> {
        const response = await this.readAppsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * read scale of the specified Deployment
     */
    async readAppsV1beta1NamespacedDeploymentScaleRaw(requestParameters: ReadAppsV1beta1NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta1NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * read scale of the specified Deployment
     */
    async readAppsV1beta1NamespacedDeploymentScale(requestParameters: ReadAppsV1beta1NamespacedDeploymentScaleRequest): Promise<IoK8sApiAppsV1beta1Scale> {
        const response = await this.readAppsV1beta1NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified Deployment
     */
    async readAppsV1beta1NamespacedDeploymentStatusRaw(requestParameters: ReadAppsV1beta1NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta1NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * read status of the specified Deployment
     */
    async readAppsV1beta1NamespacedDeploymentStatus(requestParameters: ReadAppsV1beta1NamespacedDeploymentStatusRequest): Promise<IoK8sApiAppsV1beta1Deployment> {
        const response = await this.readAppsV1beta1NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified StatefulSet
     */
    async readAppsV1beta1NamespacedStatefulSetRaw(requestParameters: ReadAppsV1beta1NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta1NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta1NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetFromJSON(jsonValue));
    }

    /**
     * read the specified StatefulSet
     */
    async readAppsV1beta1NamespacedStatefulSet(requestParameters: ReadAppsV1beta1NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta1StatefulSet> {
        const response = await this.readAppsV1beta1NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * read scale of the specified StatefulSet
     */
    async readAppsV1beta1NamespacedStatefulSetScaleRaw(requestParameters: ReadAppsV1beta1NamespacedStatefulSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta1NamespacedStatefulSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta1NamespacedStatefulSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * read scale of the specified StatefulSet
     */
    async readAppsV1beta1NamespacedStatefulSetScale(requestParameters: ReadAppsV1beta1NamespacedStatefulSetScaleRequest): Promise<IoK8sApiAppsV1beta1Scale> {
        const response = await this.readAppsV1beta1NamespacedStatefulSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified StatefulSet
     */
    async readAppsV1beta1NamespacedStatefulSetStatusRaw(requestParameters: ReadAppsV1beta1NamespacedStatefulSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta1NamespacedStatefulSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta1NamespacedStatefulSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetFromJSON(jsonValue));
    }

    /**
     * read status of the specified StatefulSet
     */
    async readAppsV1beta1NamespacedStatefulSetStatus(requestParameters: ReadAppsV1beta1NamespacedStatefulSetStatusRequest): Promise<IoK8sApiAppsV1beta1StatefulSet> {
        const response = await this.readAppsV1beta1NamespacedStatefulSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ControllerRevision
     */
    async replaceAppsV1beta1NamespacedControllerRevisionRaw(requestParameters: ReplaceAppsV1beta1NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1ControllerRevision>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta1NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta1NamespacedControllerRevision.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta1NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1ControllerRevisionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ControllerRevisionFromJSON(jsonValue));
    }

    /**
     * replace the specified ControllerRevision
     */
    async replaceAppsV1beta1NamespacedControllerRevision(requestParameters: ReplaceAppsV1beta1NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta1ControllerRevision> {
        const response = await this.replaceAppsV1beta1NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Deployment
     */
    async replaceAppsV1beta1NamespacedDeploymentRaw(requestParameters: ReplaceAppsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * replace the specified Deployment
     */
    async replaceAppsV1beta1NamespacedDeployment(requestParameters: ReplaceAppsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta1Deployment> {
        const response = await this.replaceAppsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace scale of the specified Deployment
     */
    async replaceAppsV1beta1NamespacedDeploymentScaleRaw(requestParameters: ReplaceAppsV1beta1NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta1NamespacedDeploymentScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta1NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1ScaleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * replace scale of the specified Deployment
     */
    async replaceAppsV1beta1NamespacedDeploymentScale(requestParameters: ReplaceAppsV1beta1NamespacedDeploymentScaleRequest): Promise<IoK8sApiAppsV1beta1Scale> {
        const response = await this.replaceAppsV1beta1NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified Deployment
     */
    async replaceAppsV1beta1NamespacedDeploymentStatusRaw(requestParameters: ReplaceAppsV1beta1NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta1NamespacedDeploymentStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta1NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1DeploymentFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Deployment
     */
    async replaceAppsV1beta1NamespacedDeploymentStatus(requestParameters: ReplaceAppsV1beta1NamespacedDeploymentStatusRequest): Promise<IoK8sApiAppsV1beta1Deployment> {
        const response = await this.replaceAppsV1beta1NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified StatefulSet
     */
    async replaceAppsV1beta1NamespacedStatefulSetRaw(requestParameters: ReplaceAppsV1beta1NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1StatefulSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetFromJSON(jsonValue));
    }

    /**
     * replace the specified StatefulSet
     */
    async replaceAppsV1beta1NamespacedStatefulSet(requestParameters: ReplaceAppsV1beta1NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta1StatefulSet> {
        const response = await this.replaceAppsV1beta1NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace scale of the specified StatefulSet
     */
    async replaceAppsV1beta1NamespacedStatefulSetScaleRaw(requestParameters: ReplaceAppsV1beta1NamespacedStatefulSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSetScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1ScaleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1ScaleFromJSON(jsonValue));
    }

    /**
     * replace scale of the specified StatefulSet
     */
    async replaceAppsV1beta1NamespacedStatefulSetScale(requestParameters: ReplaceAppsV1beta1NamespacedStatefulSetScaleRequest): Promise<IoK8sApiAppsV1beta1Scale> {
        const response = await this.replaceAppsV1beta1NamespacedStatefulSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified StatefulSet
     */
    async replaceAppsV1beta1NamespacedStatefulSetStatusRaw(requestParameters: ReplaceAppsV1beta1NamespacedStatefulSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta1StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta1NamespacedStatefulSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta1StatefulSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta1StatefulSetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified StatefulSet
     */
    async replaceAppsV1beta1NamespacedStatefulSetStatus(requestParameters: ReplaceAppsV1beta1NamespacedStatefulSetStatusRequest): Promise<IoK8sApiAppsV1beta1StatefulSet> {
        const response = await this.replaceAppsV1beta1NamespacedStatefulSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1ControllerRevisionListForAllNamespacesRaw(requestParameters: WatchAppsV1beta1ControllerRevisionListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/controllerrevisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1ControllerRevisionListForAllNamespaces(requestParameters: WatchAppsV1beta1ControllerRevisionListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1ControllerRevisionListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1DeploymentListForAllNamespacesRaw(requestParameters: WatchAppsV1beta1DeploymentListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1DeploymentListForAllNamespaces(requestParameters: WatchAppsV1beta1DeploymentListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1DeploymentListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta1NamespacedControllerRevisionRaw(requestParameters: WatchAppsV1beta1NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAppsV1beta1NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta1NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta1NamespacedControllerRevision(requestParameters: WatchAppsV1beta1NamespacedControllerRevisionRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1NamespacedControllerRevisionListRaw(requestParameters: WatchAppsV1beta1NamespacedControllerRevisionListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta1NamespacedControllerRevisionList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1NamespacedControllerRevisionList(requestParameters: WatchAppsV1beta1NamespacedControllerRevisionListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1NamespacedControllerRevisionListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Deployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta1NamespacedDeploymentRaw(requestParameters: WatchAppsV1beta1NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAppsV1beta1NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta1NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Deployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta1NamespacedDeployment(requestParameters: WatchAppsV1beta1NamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1NamespacedDeploymentListRaw(requestParameters: WatchAppsV1beta1NamespacedDeploymentListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta1NamespacedDeploymentList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1NamespacedDeploymentList(requestParameters: WatchAppsV1beta1NamespacedDeploymentListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1NamespacedDeploymentListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta1NamespacedStatefulSetRaw(requestParameters: WatchAppsV1beta1NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAppsV1beta1NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta1NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta1NamespacedStatefulSet(requestParameters: WatchAppsV1beta1NamespacedStatefulSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1NamespacedStatefulSetListRaw(requestParameters: WatchAppsV1beta1NamespacedStatefulSetListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta1NamespacedStatefulSetList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1NamespacedStatefulSetList(requestParameters: WatchAppsV1beta1NamespacedStatefulSetListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1NamespacedStatefulSetListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1StatefulSetListForAllNamespacesRaw(requestParameters: WatchAppsV1beta1StatefulSetListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta1/watch/statefulsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta1StatefulSetListForAllNamespaces(requestParameters: WatchAppsV1beta1StatefulSetListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta1StatefulSetListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

}
