// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import {
    IoK8sApiAppsV1beta2ControllerRevision,
    IoK8sApiAppsV1beta2ControllerRevisionFromJSON,
    IoK8sApiAppsV1beta2ControllerRevisionToJSON,
    IoK8sApiAppsV1beta2ControllerRevisionList,
    IoK8sApiAppsV1beta2ControllerRevisionListFromJSON,
    IoK8sApiAppsV1beta2ControllerRevisionListToJSON,
    IoK8sApiAppsV1beta2DaemonSet,
    IoK8sApiAppsV1beta2DaemonSetFromJSON,
    IoK8sApiAppsV1beta2DaemonSetToJSON,
    IoK8sApiAppsV1beta2DaemonSetList,
    IoK8sApiAppsV1beta2DaemonSetListFromJSON,
    IoK8sApiAppsV1beta2DaemonSetListToJSON,
    IoK8sApiAppsV1beta2Deployment,
    IoK8sApiAppsV1beta2DeploymentFromJSON,
    IoK8sApiAppsV1beta2DeploymentToJSON,
    IoK8sApiAppsV1beta2DeploymentList,
    IoK8sApiAppsV1beta2DeploymentListFromJSON,
    IoK8sApiAppsV1beta2DeploymentListToJSON,
    IoK8sApiAppsV1beta2ReplicaSet,
    IoK8sApiAppsV1beta2ReplicaSetFromJSON,
    IoK8sApiAppsV1beta2ReplicaSetToJSON,
    IoK8sApiAppsV1beta2ReplicaSetList,
    IoK8sApiAppsV1beta2ReplicaSetListFromJSON,
    IoK8sApiAppsV1beta2ReplicaSetListToJSON,
    IoK8sApiAppsV1beta2Scale,
    IoK8sApiAppsV1beta2ScaleFromJSON,
    IoK8sApiAppsV1beta2ScaleToJSON,
    IoK8sApiAppsV1beta2StatefulSet,
    IoK8sApiAppsV1beta2StatefulSetFromJSON,
    IoK8sApiAppsV1beta2StatefulSetToJSON,
    IoK8sApiAppsV1beta2StatefulSetList,
    IoK8sApiAppsV1beta2StatefulSetListFromJSON,
    IoK8sApiAppsV1beta2StatefulSetListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models/index.ts';

export interface CreateAppsV1beta2NamespacedControllerRevisionRequest {
    namespace: string;
    body: IoK8sApiAppsV1beta2ControllerRevision;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAppsV1beta2NamespacedDaemonSetRequest {
    namespace: string;
    body: IoK8sApiAppsV1beta2DaemonSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAppsV1beta2NamespacedDeploymentRequest {
    namespace: string;
    body: IoK8sApiAppsV1beta2Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAppsV1beta2NamespacedReplicaSetRequest {
    namespace: string;
    body: IoK8sApiAppsV1beta2ReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAppsV1beta2NamespacedStatefulSetRequest {
    namespace: string;
    body: IoK8sApiAppsV1beta2StatefulSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteAppsV1beta2CollectionNamespacedControllerRevisionRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2CollectionNamespacedDaemonSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2CollectionNamespacedDeploymentRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2CollectionNamespacedReplicaSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2CollectionNamespacedStatefulSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAppsV1beta2NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListAppsV1beta2ControllerRevisionForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2DaemonSetForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2DeploymentForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2NamespacedControllerRevisionRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2NamespacedDaemonSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2NamespacedDeploymentRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2NamespacedReplicaSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2NamespacedStatefulSetRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2ReplicaSetForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAppsV1beta2StatefulSetForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchAppsV1beta2NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedDaemonSetStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedReplicaSetScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedReplicaSetStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedStatefulSetScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAppsV1beta2NamespacedStatefulSetStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadAppsV1beta2NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAppsV1beta2NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAppsV1beta2NamespacedDaemonSetStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta2NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAppsV1beta2NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta2NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta2NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAppsV1beta2NamespacedReplicaSetScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta2NamespacedReplicaSetStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta2NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAppsV1beta2NamespacedStatefulSetScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReadAppsV1beta2NamespacedStatefulSetStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceAppsV1beta2NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2ControllerRevision;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2DaemonSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedDaemonSetStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2DaemonSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedDeploymentScaleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedDeploymentStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2Deployment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2ReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedReplicaSetScaleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedReplicaSetStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2ReplicaSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2StatefulSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedStatefulSetScaleRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAppsV1beta2NamespacedStatefulSetStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAppsV1beta2StatefulSet;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchAppsV1beta2ControllerRevisionListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2DaemonSetListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2DeploymentListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedControllerRevisionRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedControllerRevisionListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedDaemonSetRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedDaemonSetListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedDeploymentRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedDeploymentListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedReplicaSetRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedReplicaSetListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedStatefulSetRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2NamespacedStatefulSetListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2ReplicaSetListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAppsV1beta2StatefulSetListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * no description
 */
export class AppsV1beta2Api extends runtime.BaseAPI {

    /**
     * create a ControllerRevision
     */
    async createAppsV1beta2NamespacedControllerRevisionRaw(requestParameters: CreateAppsV1beta2NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ControllerRevision>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta2NamespacedControllerRevision.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta2NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2ControllerRevisionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ControllerRevisionFromJSON(jsonValue));
    }

    /**
     * create a ControllerRevision
     */
    async createAppsV1beta2NamespacedControllerRevision(requestParameters: CreateAppsV1beta2NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta2ControllerRevision> {
        const response = await this.createAppsV1beta2NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a DaemonSet
     */
    async createAppsV1beta2NamespacedDaemonSetRaw(requestParameters: CreateAppsV1beta2NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSet>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta2NamespacedDaemonSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta2NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2DaemonSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetFromJSON(jsonValue));
    }

    /**
     * create a DaemonSet
     */
    async createAppsV1beta2NamespacedDaemonSet(requestParameters: CreateAppsV1beta2NamespacedDaemonSetRequest): Promise<IoK8sApiAppsV1beta2DaemonSet> {
        const response = await this.createAppsV1beta2NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a Deployment
     */
    async createAppsV1beta2NamespacedDeploymentRaw(requestParameters: CreateAppsV1beta2NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Deployment>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta2NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta2NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentFromJSON(jsonValue));
    }

    /**
     * create a Deployment
     */
    async createAppsV1beta2NamespacedDeployment(requestParameters: CreateAppsV1beta2NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta2Deployment> {
        const response = await this.createAppsV1beta2NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a ReplicaSet
     */
    async createAppsV1beta2NamespacedReplicaSetRaw(requestParameters: CreateAppsV1beta2NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSet>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta2NamespacedReplicaSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta2NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2ReplicaSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetFromJSON(jsonValue));
    }

    /**
     * create a ReplicaSet
     */
    async createAppsV1beta2NamespacedReplicaSet(requestParameters: CreateAppsV1beta2NamespacedReplicaSetRequest): Promise<IoK8sApiAppsV1beta2ReplicaSet> {
        const response = await this.createAppsV1beta2NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a StatefulSet
     */
    async createAppsV1beta2NamespacedStatefulSetRaw(requestParameters: CreateAppsV1beta2NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSet>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAppsV1beta2NamespacedStatefulSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAppsV1beta2NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2StatefulSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetFromJSON(jsonValue));
    }

    /**
     * create a StatefulSet
     */
    async createAppsV1beta2NamespacedStatefulSet(requestParameters: CreateAppsV1beta2NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta2StatefulSet> {
        const response = await this.createAppsV1beta2NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ControllerRevision
     */
    async deleteAppsV1beta2CollectionNamespacedControllerRevisionRaw(requestParameters: DeleteAppsV1beta2CollectionNamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2CollectionNamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ControllerRevision
     */
    async deleteAppsV1beta2CollectionNamespacedControllerRevision(requestParameters: DeleteAppsV1beta2CollectionNamespacedControllerRevisionRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2CollectionNamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of DaemonSet
     */
    async deleteAppsV1beta2CollectionNamespacedDaemonSetRaw(requestParameters: DeleteAppsV1beta2CollectionNamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2CollectionNamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of DaemonSet
     */
    async deleteAppsV1beta2CollectionNamespacedDaemonSet(requestParameters: DeleteAppsV1beta2CollectionNamespacedDaemonSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2CollectionNamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of Deployment
     */
    async deleteAppsV1beta2CollectionNamespacedDeploymentRaw(requestParameters: DeleteAppsV1beta2CollectionNamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2CollectionNamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of Deployment
     */
    async deleteAppsV1beta2CollectionNamespacedDeployment(requestParameters: DeleteAppsV1beta2CollectionNamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2CollectionNamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ReplicaSet
     */
    async deleteAppsV1beta2CollectionNamespacedReplicaSetRaw(requestParameters: DeleteAppsV1beta2CollectionNamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2CollectionNamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ReplicaSet
     */
    async deleteAppsV1beta2CollectionNamespacedReplicaSet(requestParameters: DeleteAppsV1beta2CollectionNamespacedReplicaSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2CollectionNamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of StatefulSet
     */
    async deleteAppsV1beta2CollectionNamespacedStatefulSetRaw(requestParameters: DeleteAppsV1beta2CollectionNamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2CollectionNamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of StatefulSet
     */
    async deleteAppsV1beta2CollectionNamespacedStatefulSet(requestParameters: DeleteAppsV1beta2CollectionNamespacedStatefulSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2CollectionNamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a ControllerRevision
     */
    async deleteAppsV1beta2NamespacedControllerRevisionRaw(requestParameters: DeleteAppsV1beta2NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAppsV1beta2NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ControllerRevision
     */
    async deleteAppsV1beta2NamespacedControllerRevision(requestParameters: DeleteAppsV1beta2NamespacedControllerRevisionRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a DaemonSet
     */
    async deleteAppsV1beta2NamespacedDaemonSetRaw(requestParameters: DeleteAppsV1beta2NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAppsV1beta2NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a DaemonSet
     */
    async deleteAppsV1beta2NamespacedDaemonSet(requestParameters: DeleteAppsV1beta2NamespacedDaemonSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a Deployment
     */
    async deleteAppsV1beta2NamespacedDeploymentRaw(requestParameters: DeleteAppsV1beta2NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAppsV1beta2NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a Deployment
     */
    async deleteAppsV1beta2NamespacedDeployment(requestParameters: DeleteAppsV1beta2NamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a ReplicaSet
     */
    async deleteAppsV1beta2NamespacedReplicaSetRaw(requestParameters: DeleteAppsV1beta2NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAppsV1beta2NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ReplicaSet
     */
    async deleteAppsV1beta2NamespacedReplicaSet(requestParameters: DeleteAppsV1beta2NamespacedReplicaSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a StatefulSet
     */
    async deleteAppsV1beta2NamespacedStatefulSetRaw(requestParameters: DeleteAppsV1beta2NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAppsV1beta2NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAppsV1beta2NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a StatefulSet
     */
    async deleteAppsV1beta2NamespacedStatefulSet(requestParameters: DeleteAppsV1beta2NamespacedStatefulSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAppsV1beta2NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAppsV1beta2APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAppsV1beta2APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getAppsV1beta2APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind ControllerRevision
     */
    async listAppsV1beta2ControllerRevisionForAllNamespacesRaw(requestParameters: ListAppsV1beta2ControllerRevisionForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ControllerRevisionList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/controllerrevisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ControllerRevisionListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ControllerRevision
     */
    async listAppsV1beta2ControllerRevisionForAllNamespaces(requestParameters: ListAppsV1beta2ControllerRevisionForAllNamespacesRequest): Promise<IoK8sApiAppsV1beta2ControllerRevisionList> {
        const response = await this.listAppsV1beta2ControllerRevisionForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind DaemonSet
     */
    async listAppsV1beta2DaemonSetForAllNamespacesRaw(requestParameters: ListAppsV1beta2DaemonSetForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSetList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/daemonsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind DaemonSet
     */
    async listAppsV1beta2DaemonSetForAllNamespaces(requestParameters: ListAppsV1beta2DaemonSetForAllNamespacesRequest): Promise<IoK8sApiAppsV1beta2DaemonSetList> {
        const response = await this.listAppsV1beta2DaemonSetForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listAppsV1beta2DeploymentForAllNamespacesRaw(requestParameters: ListAppsV1beta2DeploymentForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DeploymentList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listAppsV1beta2DeploymentForAllNamespaces(requestParameters: ListAppsV1beta2DeploymentForAllNamespacesRequest): Promise<IoK8sApiAppsV1beta2DeploymentList> {
        const response = await this.listAppsV1beta2DeploymentForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ControllerRevision
     */
    async listAppsV1beta2NamespacedControllerRevisionRaw(requestParameters: ListAppsV1beta2NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ControllerRevisionList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAppsV1beta2NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ControllerRevisionListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ControllerRevision
     */
    async listAppsV1beta2NamespacedControllerRevision(requestParameters: ListAppsV1beta2NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta2ControllerRevisionList> {
        const response = await this.listAppsV1beta2NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind DaemonSet
     */
    async listAppsV1beta2NamespacedDaemonSetRaw(requestParameters: ListAppsV1beta2NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSetList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAppsV1beta2NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind DaemonSet
     */
    async listAppsV1beta2NamespacedDaemonSet(requestParameters: ListAppsV1beta2NamespacedDaemonSetRequest): Promise<IoK8sApiAppsV1beta2DaemonSetList> {
        const response = await this.listAppsV1beta2NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listAppsV1beta2NamespacedDeploymentRaw(requestParameters: ListAppsV1beta2NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DeploymentList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAppsV1beta2NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind Deployment
     */
    async listAppsV1beta2NamespacedDeployment(requestParameters: ListAppsV1beta2NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta2DeploymentList> {
        const response = await this.listAppsV1beta2NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ReplicaSet
     */
    async listAppsV1beta2NamespacedReplicaSetRaw(requestParameters: ListAppsV1beta2NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSetList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAppsV1beta2NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ReplicaSet
     */
    async listAppsV1beta2NamespacedReplicaSet(requestParameters: ListAppsV1beta2NamespacedReplicaSetRequest): Promise<IoK8sApiAppsV1beta2ReplicaSetList> {
        const response = await this.listAppsV1beta2NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind StatefulSet
     */
    async listAppsV1beta2NamespacedStatefulSetRaw(requestParameters: ListAppsV1beta2NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSetList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAppsV1beta2NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind StatefulSet
     */
    async listAppsV1beta2NamespacedStatefulSet(requestParameters: ListAppsV1beta2NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta2StatefulSetList> {
        const response = await this.listAppsV1beta2NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ReplicaSet
     */
    async listAppsV1beta2ReplicaSetForAllNamespacesRaw(requestParameters: ListAppsV1beta2ReplicaSetForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSetList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/replicasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ReplicaSet
     */
    async listAppsV1beta2ReplicaSetForAllNamespaces(requestParameters: ListAppsV1beta2ReplicaSetForAllNamespacesRequest): Promise<IoK8sApiAppsV1beta2ReplicaSetList> {
        const response = await this.listAppsV1beta2ReplicaSetForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind StatefulSet
     */
    async listAppsV1beta2StatefulSetForAllNamespacesRaw(requestParameters: ListAppsV1beta2StatefulSetForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSetList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/statefulsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind StatefulSet
     */
    async listAppsV1beta2StatefulSetForAllNamespaces(requestParameters: ListAppsV1beta2StatefulSetForAllNamespacesRequest): Promise<IoK8sApiAppsV1beta2StatefulSetList> {
        const response = await this.listAppsV1beta2StatefulSetForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ControllerRevision
     */
    async patchAppsV1beta2NamespacedControllerRevisionRaw(requestParameters: PatchAppsV1beta2NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ControllerRevision>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedControllerRevision.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ControllerRevisionFromJSON(jsonValue));
    }

    /**
     * partially update the specified ControllerRevision
     */
    async patchAppsV1beta2NamespacedControllerRevision(requestParameters: PatchAppsV1beta2NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta2ControllerRevision> {
        const response = await this.patchAppsV1beta2NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified DaemonSet
     */
    async patchAppsV1beta2NamespacedDaemonSetRaw(requestParameters: PatchAppsV1beta2NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedDaemonSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetFromJSON(jsonValue));
    }

    /**
     * partially update the specified DaemonSet
     */
    async patchAppsV1beta2NamespacedDaemonSet(requestParameters: PatchAppsV1beta2NamespacedDaemonSetRequest): Promise<IoK8sApiAppsV1beta2DaemonSet> {
        const response = await this.patchAppsV1beta2NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified DaemonSet
     */
    async patchAppsV1beta2NamespacedDaemonSetStatusRaw(requestParameters: PatchAppsV1beta2NamespacedDaemonSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedDaemonSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedDaemonSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedDaemonSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified DaemonSet
     */
    async patchAppsV1beta2NamespacedDaemonSetStatus(requestParameters: PatchAppsV1beta2NamespacedDaemonSetStatusRequest): Promise<IoK8sApiAppsV1beta2DaemonSet> {
        const response = await this.patchAppsV1beta2NamespacedDaemonSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified Deployment
     */
    async patchAppsV1beta2NamespacedDeploymentRaw(requestParameters: PatchAppsV1beta2NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentFromJSON(jsonValue));
    }

    /**
     * partially update the specified Deployment
     */
    async patchAppsV1beta2NamespacedDeployment(requestParameters: PatchAppsV1beta2NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta2Deployment> {
        const response = await this.patchAppsV1beta2NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update scale of the specified Deployment
     */
    async patchAppsV1beta2NamespacedDeploymentScaleRaw(requestParameters: PatchAppsV1beta2NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedDeploymentScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * partially update scale of the specified Deployment
     */
    async patchAppsV1beta2NamespacedDeploymentScale(requestParameters: PatchAppsV1beta2NamespacedDeploymentScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.patchAppsV1beta2NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified Deployment
     */
    async patchAppsV1beta2NamespacedDeploymentStatusRaw(requestParameters: PatchAppsV1beta2NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedDeploymentStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified Deployment
     */
    async patchAppsV1beta2NamespacedDeploymentStatus(requestParameters: PatchAppsV1beta2NamespacedDeploymentStatusRequest): Promise<IoK8sApiAppsV1beta2Deployment> {
        const response = await this.patchAppsV1beta2NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ReplicaSet
     */
    async patchAppsV1beta2NamespacedReplicaSetRaw(requestParameters: PatchAppsV1beta2NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedReplicaSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetFromJSON(jsonValue));
    }

    /**
     * partially update the specified ReplicaSet
     */
    async patchAppsV1beta2NamespacedReplicaSet(requestParameters: PatchAppsV1beta2NamespacedReplicaSetRequest): Promise<IoK8sApiAppsV1beta2ReplicaSet> {
        const response = await this.patchAppsV1beta2NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update scale of the specified ReplicaSet
     */
    async patchAppsV1beta2NamespacedReplicaSetScaleRaw(requestParameters: PatchAppsV1beta2NamespacedReplicaSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedReplicaSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedReplicaSetScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedReplicaSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * partially update scale of the specified ReplicaSet
     */
    async patchAppsV1beta2NamespacedReplicaSetScale(requestParameters: PatchAppsV1beta2NamespacedReplicaSetScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.patchAppsV1beta2NamespacedReplicaSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified ReplicaSet
     */
    async patchAppsV1beta2NamespacedReplicaSetStatusRaw(requestParameters: PatchAppsV1beta2NamespacedReplicaSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedReplicaSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedReplicaSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedReplicaSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified ReplicaSet
     */
    async patchAppsV1beta2NamespacedReplicaSetStatus(requestParameters: PatchAppsV1beta2NamespacedReplicaSetStatusRequest): Promise<IoK8sApiAppsV1beta2ReplicaSet> {
        const response = await this.patchAppsV1beta2NamespacedReplicaSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified StatefulSet
     */
    async patchAppsV1beta2NamespacedStatefulSetRaw(requestParameters: PatchAppsV1beta2NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedStatefulSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetFromJSON(jsonValue));
    }

    /**
     * partially update the specified StatefulSet
     */
    async patchAppsV1beta2NamespacedStatefulSet(requestParameters: PatchAppsV1beta2NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta2StatefulSet> {
        const response = await this.patchAppsV1beta2NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update scale of the specified StatefulSet
     */
    async patchAppsV1beta2NamespacedStatefulSetScaleRaw(requestParameters: PatchAppsV1beta2NamespacedStatefulSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedStatefulSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedStatefulSetScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedStatefulSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * partially update scale of the specified StatefulSet
     */
    async patchAppsV1beta2NamespacedStatefulSetScale(requestParameters: PatchAppsV1beta2NamespacedStatefulSetScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.patchAppsV1beta2NamespacedStatefulSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified StatefulSet
     */
    async patchAppsV1beta2NamespacedStatefulSetStatusRaw(requestParameters: PatchAppsV1beta2NamespacedStatefulSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAppsV1beta2NamespacedStatefulSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAppsV1beta2NamespacedStatefulSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAppsV1beta2NamespacedStatefulSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified StatefulSet
     */
    async patchAppsV1beta2NamespacedStatefulSetStatus(requestParameters: PatchAppsV1beta2NamespacedStatefulSetStatusRequest): Promise<IoK8sApiAppsV1beta2StatefulSet> {
        const response = await this.patchAppsV1beta2NamespacedStatefulSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ControllerRevision
     */
    async readAppsV1beta2NamespacedControllerRevisionRaw(requestParameters: ReadAppsV1beta2NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ControllerRevision>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ControllerRevisionFromJSON(jsonValue));
    }

    /**
     * read the specified ControllerRevision
     */
    async readAppsV1beta2NamespacedControllerRevision(requestParameters: ReadAppsV1beta2NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta2ControllerRevision> {
        const response = await this.readAppsV1beta2NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified DaemonSet
     */
    async readAppsV1beta2NamespacedDaemonSetRaw(requestParameters: ReadAppsV1beta2NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetFromJSON(jsonValue));
    }

    /**
     * read the specified DaemonSet
     */
    async readAppsV1beta2NamespacedDaemonSet(requestParameters: ReadAppsV1beta2NamespacedDaemonSetRequest): Promise<IoK8sApiAppsV1beta2DaemonSet> {
        const response = await this.readAppsV1beta2NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified DaemonSet
     */
    async readAppsV1beta2NamespacedDaemonSetStatusRaw(requestParameters: ReadAppsV1beta2NamespacedDaemonSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedDaemonSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedDaemonSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetFromJSON(jsonValue));
    }

    /**
     * read status of the specified DaemonSet
     */
    async readAppsV1beta2NamespacedDaemonSetStatus(requestParameters: ReadAppsV1beta2NamespacedDaemonSetStatusRequest): Promise<IoK8sApiAppsV1beta2DaemonSet> {
        const response = await this.readAppsV1beta2NamespacedDaemonSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified Deployment
     */
    async readAppsV1beta2NamespacedDeploymentRaw(requestParameters: ReadAppsV1beta2NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentFromJSON(jsonValue));
    }

    /**
     * read the specified Deployment
     */
    async readAppsV1beta2NamespacedDeployment(requestParameters: ReadAppsV1beta2NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta2Deployment> {
        const response = await this.readAppsV1beta2NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * read scale of the specified Deployment
     */
    async readAppsV1beta2NamespacedDeploymentScaleRaw(requestParameters: ReadAppsV1beta2NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * read scale of the specified Deployment
     */
    async readAppsV1beta2NamespacedDeploymentScale(requestParameters: ReadAppsV1beta2NamespacedDeploymentScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.readAppsV1beta2NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified Deployment
     */
    async readAppsV1beta2NamespacedDeploymentStatusRaw(requestParameters: ReadAppsV1beta2NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentFromJSON(jsonValue));
    }

    /**
     * read status of the specified Deployment
     */
    async readAppsV1beta2NamespacedDeploymentStatus(requestParameters: ReadAppsV1beta2NamespacedDeploymentStatusRequest): Promise<IoK8sApiAppsV1beta2Deployment> {
        const response = await this.readAppsV1beta2NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ReplicaSet
     */
    async readAppsV1beta2NamespacedReplicaSetRaw(requestParameters: ReadAppsV1beta2NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetFromJSON(jsonValue));
    }

    /**
     * read the specified ReplicaSet
     */
    async readAppsV1beta2NamespacedReplicaSet(requestParameters: ReadAppsV1beta2NamespacedReplicaSetRequest): Promise<IoK8sApiAppsV1beta2ReplicaSet> {
        const response = await this.readAppsV1beta2NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * read scale of the specified ReplicaSet
     */
    async readAppsV1beta2NamespacedReplicaSetScaleRaw(requestParameters: ReadAppsV1beta2NamespacedReplicaSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedReplicaSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedReplicaSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * read scale of the specified ReplicaSet
     */
    async readAppsV1beta2NamespacedReplicaSetScale(requestParameters: ReadAppsV1beta2NamespacedReplicaSetScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.readAppsV1beta2NamespacedReplicaSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified ReplicaSet
     */
    async readAppsV1beta2NamespacedReplicaSetStatusRaw(requestParameters: ReadAppsV1beta2NamespacedReplicaSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedReplicaSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedReplicaSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetFromJSON(jsonValue));
    }

    /**
     * read status of the specified ReplicaSet
     */
    async readAppsV1beta2NamespacedReplicaSetStatus(requestParameters: ReadAppsV1beta2NamespacedReplicaSetStatusRequest): Promise<IoK8sApiAppsV1beta2ReplicaSet> {
        const response = await this.readAppsV1beta2NamespacedReplicaSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified StatefulSet
     */
    async readAppsV1beta2NamespacedStatefulSetRaw(requestParameters: ReadAppsV1beta2NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetFromJSON(jsonValue));
    }

    /**
     * read the specified StatefulSet
     */
    async readAppsV1beta2NamespacedStatefulSet(requestParameters: ReadAppsV1beta2NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta2StatefulSet> {
        const response = await this.readAppsV1beta2NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * read scale of the specified StatefulSet
     */
    async readAppsV1beta2NamespacedStatefulSetScaleRaw(requestParameters: ReadAppsV1beta2NamespacedStatefulSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedStatefulSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedStatefulSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * read scale of the specified StatefulSet
     */
    async readAppsV1beta2NamespacedStatefulSetScale(requestParameters: ReadAppsV1beta2NamespacedStatefulSetScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.readAppsV1beta2NamespacedStatefulSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified StatefulSet
     */
    async readAppsV1beta2NamespacedStatefulSetStatusRaw(requestParameters: ReadAppsV1beta2NamespacedStatefulSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAppsV1beta2NamespacedStatefulSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAppsV1beta2NamespacedStatefulSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetFromJSON(jsonValue));
    }

    /**
     * read status of the specified StatefulSet
     */
    async readAppsV1beta2NamespacedStatefulSetStatus(requestParameters: ReadAppsV1beta2NamespacedStatefulSetStatusRequest): Promise<IoK8sApiAppsV1beta2StatefulSet> {
        const response = await this.readAppsV1beta2NamespacedStatefulSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ControllerRevision
     */
    async replaceAppsV1beta2NamespacedControllerRevisionRaw(requestParameters: ReplaceAppsV1beta2NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ControllerRevision>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedControllerRevision.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2ControllerRevisionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ControllerRevisionFromJSON(jsonValue));
    }

    /**
     * replace the specified ControllerRevision
     */
    async replaceAppsV1beta2NamespacedControllerRevision(requestParameters: ReplaceAppsV1beta2NamespacedControllerRevisionRequest): Promise<IoK8sApiAppsV1beta2ControllerRevision> {
        const response = await this.replaceAppsV1beta2NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified DaemonSet
     */
    async replaceAppsV1beta2NamespacedDaemonSetRaw(requestParameters: ReplaceAppsV1beta2NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedDaemonSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2DaemonSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetFromJSON(jsonValue));
    }

    /**
     * replace the specified DaemonSet
     */
    async replaceAppsV1beta2NamespacedDaemonSet(requestParameters: ReplaceAppsV1beta2NamespacedDaemonSetRequest): Promise<IoK8sApiAppsV1beta2DaemonSet> {
        const response = await this.replaceAppsV1beta2NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified DaemonSet
     */
    async replaceAppsV1beta2NamespacedDaemonSetStatusRaw(requestParameters: ReplaceAppsV1beta2NamespacedDaemonSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2DaemonSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedDaemonSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedDaemonSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedDaemonSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2DaemonSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DaemonSetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified DaemonSet
     */
    async replaceAppsV1beta2NamespacedDaemonSetStatus(requestParameters: ReplaceAppsV1beta2NamespacedDaemonSetStatusRequest): Promise<IoK8sApiAppsV1beta2DaemonSet> {
        const response = await this.replaceAppsV1beta2NamespacedDaemonSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified Deployment
     */
    async replaceAppsV1beta2NamespacedDeploymentRaw(requestParameters: ReplaceAppsV1beta2NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentFromJSON(jsonValue));
    }

    /**
     * replace the specified Deployment
     */
    async replaceAppsV1beta2NamespacedDeployment(requestParameters: ReplaceAppsV1beta2NamespacedDeploymentRequest): Promise<IoK8sApiAppsV1beta2Deployment> {
        const response = await this.replaceAppsV1beta2NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace scale of the specified Deployment
     */
    async replaceAppsV1beta2NamespacedDeploymentScaleRaw(requestParameters: ReplaceAppsV1beta2NamespacedDeploymentScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedDeploymentScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedDeploymentScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedDeploymentScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2ScaleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * replace scale of the specified Deployment
     */
    async replaceAppsV1beta2NamespacedDeploymentScale(requestParameters: ReplaceAppsV1beta2NamespacedDeploymentScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.replaceAppsV1beta2NamespacedDeploymentScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified Deployment
     */
    async replaceAppsV1beta2NamespacedDeploymentStatusRaw(requestParameters: ReplaceAppsV1beta2NamespacedDeploymentStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Deployment>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedDeploymentStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedDeploymentStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedDeploymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2DeploymentFromJSON(jsonValue));
    }

    /**
     * replace status of the specified Deployment
     */
    async replaceAppsV1beta2NamespacedDeploymentStatus(requestParameters: ReplaceAppsV1beta2NamespacedDeploymentStatusRequest): Promise<IoK8sApiAppsV1beta2Deployment> {
        const response = await this.replaceAppsV1beta2NamespacedDeploymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ReplicaSet
     */
    async replaceAppsV1beta2NamespacedReplicaSetRaw(requestParameters: ReplaceAppsV1beta2NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2ReplicaSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetFromJSON(jsonValue));
    }

    /**
     * replace the specified ReplicaSet
     */
    async replaceAppsV1beta2NamespacedReplicaSet(requestParameters: ReplaceAppsV1beta2NamespacedReplicaSetRequest): Promise<IoK8sApiAppsV1beta2ReplicaSet> {
        const response = await this.replaceAppsV1beta2NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace scale of the specified ReplicaSet
     */
    async replaceAppsV1beta2NamespacedReplicaSetScaleRaw(requestParameters: ReplaceAppsV1beta2NamespacedReplicaSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSetScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2ScaleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * replace scale of the specified ReplicaSet
     */
    async replaceAppsV1beta2NamespacedReplicaSetScale(requestParameters: ReplaceAppsV1beta2NamespacedReplicaSetScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.replaceAppsV1beta2NamespacedReplicaSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified ReplicaSet
     */
    async replaceAppsV1beta2NamespacedReplicaSetStatusRaw(requestParameters: ReplaceAppsV1beta2NamespacedReplicaSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2ReplicaSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedReplicaSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2ReplicaSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ReplicaSetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified ReplicaSet
     */
    async replaceAppsV1beta2NamespacedReplicaSetStatus(requestParameters: ReplaceAppsV1beta2NamespacedReplicaSetStatusRequest): Promise<IoK8sApiAppsV1beta2ReplicaSet> {
        const response = await this.replaceAppsV1beta2NamespacedReplicaSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified StatefulSet
     */
    async replaceAppsV1beta2NamespacedStatefulSetRaw(requestParameters: ReplaceAppsV1beta2NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSet.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2StatefulSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetFromJSON(jsonValue));
    }

    /**
     * replace the specified StatefulSet
     */
    async replaceAppsV1beta2NamespacedStatefulSet(requestParameters: ReplaceAppsV1beta2NamespacedStatefulSetRequest): Promise<IoK8sApiAppsV1beta2StatefulSet> {
        const response = await this.replaceAppsV1beta2NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace scale of the specified StatefulSet
     */
    async replaceAppsV1beta2NamespacedStatefulSetScaleRaw(requestParameters: ReplaceAppsV1beta2NamespacedStatefulSetScaleRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2Scale>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSetScale.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSetScale.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSetScale.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2ScaleToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2ScaleFromJSON(jsonValue));
    }

    /**
     * replace scale of the specified StatefulSet
     */
    async replaceAppsV1beta2NamespacedStatefulSetScale(requestParameters: ReplaceAppsV1beta2NamespacedStatefulSetScaleRequest): Promise<IoK8sApiAppsV1beta2Scale> {
        const response = await this.replaceAppsV1beta2NamespacedStatefulSetScaleRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified StatefulSet
     */
    async replaceAppsV1beta2NamespacedStatefulSetStatusRaw(requestParameters: ReplaceAppsV1beta2NamespacedStatefulSetStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAppsV1beta2StatefulSet>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSetStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSetStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAppsV1beta2NamespacedStatefulSetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAppsV1beta2StatefulSetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAppsV1beta2StatefulSetFromJSON(jsonValue));
    }

    /**
     * replace status of the specified StatefulSet
     */
    async replaceAppsV1beta2NamespacedStatefulSetStatus(requestParameters: ReplaceAppsV1beta2NamespacedStatefulSetStatusRequest): Promise<IoK8sApiAppsV1beta2StatefulSet> {
        const response = await this.replaceAppsV1beta2NamespacedStatefulSetStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2ControllerRevisionListForAllNamespacesRaw(requestParameters: WatchAppsV1beta2ControllerRevisionListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/controllerrevisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2ControllerRevisionListForAllNamespaces(requestParameters: WatchAppsV1beta2ControllerRevisionListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2ControllerRevisionListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2DaemonSetListForAllNamespacesRaw(requestParameters: WatchAppsV1beta2DaemonSetListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/daemonsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2DaemonSetListForAllNamespaces(requestParameters: WatchAppsV1beta2DaemonSetListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2DaemonSetListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2DeploymentListForAllNamespacesRaw(requestParameters: WatchAppsV1beta2DeploymentListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2DeploymentListForAllNamespaces(requestParameters: WatchAppsV1beta2DeploymentListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2DeploymentListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedControllerRevisionRaw(requestParameters: WatchAppsV1beta2NamespacedControllerRevisionRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAppsV1beta2NamespacedControllerRevision.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedControllerRevision.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedControllerRevision(requestParameters: WatchAppsV1beta2NamespacedControllerRevisionRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedControllerRevisionRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedControllerRevisionListRaw(requestParameters: WatchAppsV1beta2NamespacedControllerRevisionListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedControllerRevisionList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ControllerRevision. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedControllerRevisionList(requestParameters: WatchAppsV1beta2NamespacedControllerRevisionListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedControllerRevisionListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedDaemonSetRaw(requestParameters: WatchAppsV1beta2NamespacedDaemonSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAppsV1beta2NamespacedDaemonSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedDaemonSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedDaemonSet(requestParameters: WatchAppsV1beta2NamespacedDaemonSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedDaemonSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedDaemonSetListRaw(requestParameters: WatchAppsV1beta2NamespacedDaemonSetListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedDaemonSetList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of DaemonSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedDaemonSetList(requestParameters: WatchAppsV1beta2NamespacedDaemonSetListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedDaemonSetListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind Deployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedDeploymentRaw(requestParameters: WatchAppsV1beta2NamespacedDeploymentRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAppsV1beta2NamespacedDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind Deployment. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedDeployment(requestParameters: WatchAppsV1beta2NamespacedDeploymentRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedDeploymentListRaw(requestParameters: WatchAppsV1beta2NamespacedDeploymentListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedDeploymentList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of Deployment. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedDeploymentList(requestParameters: WatchAppsV1beta2NamespacedDeploymentListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedDeploymentListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedReplicaSetRaw(requestParameters: WatchAppsV1beta2NamespacedReplicaSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAppsV1beta2NamespacedReplicaSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedReplicaSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedReplicaSet(requestParameters: WatchAppsV1beta2NamespacedReplicaSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedReplicaSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedReplicaSetListRaw(requestParameters: WatchAppsV1beta2NamespacedReplicaSetListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedReplicaSetList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedReplicaSetList(requestParameters: WatchAppsV1beta2NamespacedReplicaSetListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedReplicaSetListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedStatefulSetRaw(requestParameters: WatchAppsV1beta2NamespacedStatefulSetRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAppsV1beta2NamespacedStatefulSet.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedStatefulSet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAppsV1beta2NamespacedStatefulSet(requestParameters: WatchAppsV1beta2NamespacedStatefulSetRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedStatefulSetRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedStatefulSetListRaw(requestParameters: WatchAppsV1beta2NamespacedStatefulSetListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAppsV1beta2NamespacedStatefulSetList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2NamespacedStatefulSetList(requestParameters: WatchAppsV1beta2NamespacedStatefulSetListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2NamespacedStatefulSetListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2ReplicaSetListForAllNamespacesRaw(requestParameters: WatchAppsV1beta2ReplicaSetListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/replicasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ReplicaSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2ReplicaSetListForAllNamespaces(requestParameters: WatchAppsV1beta2ReplicaSetListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2ReplicaSetListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2StatefulSetListForAllNamespacesRaw(requestParameters: WatchAppsV1beta2StatefulSetListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/apps/v1beta2/watch/statefulsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of StatefulSet. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAppsV1beta2StatefulSetListForAllNamespaces(requestParameters: WatchAppsV1beta2StatefulSetListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAppsV1beta2StatefulSetListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

}
