// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration,
    IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationFromJSON,
    IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationToJSON,
    IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationList,
    IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationListFromJSON,
    IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationListToJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration,
    IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationFromJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationToJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationList,
    IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationListFromJSON,
    IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models';

export interface CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest {
    body: IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest {
    body: IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest {
    name: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest {
    name: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest {
    name: string;
    body: IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest {
    name: string;
    body: IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * no description
 */
export class AdmissionregistrationV1beta1Api extends runtime.BaseAPI {

    /**
     * create a MutatingWebhookConfiguration
     */
    async createAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters: CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAdmissionregistrationV1beta1MutatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * create a MutatingWebhookConfiguration
     */
    async createAdmissionregistrationV1beta1MutatingWebhookConfiguration(requestParameters: CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration> {
        const response = await this.createAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a ValidatingWebhookConfiguration
     */
    async createAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters: CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAdmissionregistrationV1beta1ValidatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * create a ValidatingWebhookConfiguration
     */
    async createAdmissionregistrationV1beta1ValidatingWebhookConfiguration(requestParameters: CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration> {
        const response = await this.createAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of MutatingWebhookConfiguration
     */
    async deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationRaw(requestParameters: DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of MutatingWebhookConfiguration
     */
    async deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration(requestParameters: DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of ValidatingWebhookConfiguration
     */
    async deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationRaw(requestParameters: DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of ValidatingWebhookConfiguration
     */
    async deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration(requestParameters: DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a MutatingWebhookConfiguration
     */
    async deleteAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters: DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a MutatingWebhookConfiguration
     */
    async deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration(requestParameters: DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a ValidatingWebhookConfiguration
     */
    async deleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters: DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a ValidatingWebhookConfiguration
     */
    async deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration(requestParameters: DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAdmissionregistrationV1beta1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAdmissionregistrationV1beta1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getAdmissionregistrationV1beta1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind MutatingWebhookConfiguration
     */
    async listAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters: ListAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind MutatingWebhookConfiguration
     */
    async listAdmissionregistrationV1beta1MutatingWebhookConfiguration(requestParameters: ListAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationList> {
        const response = await this.listAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind ValidatingWebhookConfiguration
     */
    async listAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters: ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind ValidatingWebhookConfiguration
     */
    async listAdmissionregistrationV1beta1ValidatingWebhookConfiguration(requestParameters: ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationList> {
        const response = await this.listAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified MutatingWebhookConfiguration
     */
    async patchAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters: PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAdmissionregistrationV1beta1MutatingWebhookConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAdmissionregistrationV1beta1MutatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update the specified MutatingWebhookConfiguration
     */
    async patchAdmissionregistrationV1beta1MutatingWebhookConfiguration(requestParameters: PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration> {
        const response = await this.patchAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified ValidatingWebhookConfiguration
     */
    async patchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters: PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update the specified ValidatingWebhookConfiguration
     */
    async patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(requestParameters: PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration> {
        const response = await this.patchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified MutatingWebhookConfiguration
     */
    async readAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters: ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAdmissionregistrationV1beta1MutatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * read the specified MutatingWebhookConfiguration
     */
    async readAdmissionregistrationV1beta1MutatingWebhookConfiguration(requestParameters: ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration> {
        const response = await this.readAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified ValidatingWebhookConfiguration
     */
    async readAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters: ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAdmissionregistrationV1beta1ValidatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * read the specified ValidatingWebhookConfiguration
     */
    async readAdmissionregistrationV1beta1ValidatingWebhookConfiguration(requestParameters: ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration> {
        const response = await this.readAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified MutatingWebhookConfiguration
     */
    async replaceAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters: ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * replace the specified MutatingWebhookConfiguration
     */
    async replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration(requestParameters: ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1MutatingWebhookConfiguration> {
        const response = await this.replaceAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified ValidatingWebhookConfiguration
     */
    async replaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters: ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfigurationFromJSON(jsonValue));
    }

    /**
     * replace the specified ValidatingWebhookConfiguration
     */
    async replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration(requestParameters: ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<IoK8sApiAdmissionregistrationV1beta1ValidatingWebhookConfiguration> {
        const response = await this.replaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind MutatingWebhookConfiguration. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters: WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAdmissionregistrationV1beta1MutatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind MutatingWebhookConfiguration. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAdmissionregistrationV1beta1MutatingWebhookConfiguration(requestParameters: WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAdmissionregistrationV1beta1MutatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of MutatingWebhookConfiguration. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAdmissionregistrationV1beta1MutatingWebhookConfigurationListRaw(requestParameters: WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of MutatingWebhookConfiguration. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAdmissionregistrationV1beta1MutatingWebhookConfigurationList(requestParameters: WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAdmissionregistrationV1beta1MutatingWebhookConfigurationListRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind ValidatingWebhookConfiguration. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters: WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAdmissionregistrationV1beta1ValidatingWebhookConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind ValidatingWebhookConfiguration. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(requestParameters: WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of ValidatingWebhookConfiguration. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListRaw(requestParameters: WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of ValidatingWebhookConfiguration. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationList(requestParameters: WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListRaw(requestParameters);
        return await response.value();
    }

}
