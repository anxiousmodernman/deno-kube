// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import {
    IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler,
    IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerFromJSON,
    IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerToJSON,
    IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerList,
    IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerListFromJSON,
    IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models.ts';

export interface CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest {
    namespace: string;
    body: IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest {
    name: string;
    namespace: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}

export interface ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest {
    name: string;
    namespace: string;
    body: IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest {
    name: string;
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRequest {
    namespace: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * no description
 */
export class AutoscalingV2beta2Api extends runtime.BaseAPI {

    /**
     * create a HorizontalPodAutoscaler
     */
    async createAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters: CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerFromJSON(jsonValue));
    }

    /**
     * create a HorizontalPodAutoscaler
     */
    async createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(requestParameters: CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler> {
        const response = await this.createAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of HorizontalPodAutoscaler
     */
    async deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRaw(requestParameters: DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of HorizontalPodAutoscaler
     */
    async deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler(requestParameters: DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a HorizontalPodAutoscaler
     */
    async deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters: DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a HorizontalPodAutoscaler
     */
    async deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(requestParameters: DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAutoscalingV2beta2APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAutoscalingV2beta2APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getAutoscalingV2beta2APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind HorizontalPodAutoscaler
     */
    async listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRaw(requestParameters: ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/horizontalpodautoscalers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind HorizontalPodAutoscaler
     */
    async listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces(requestParameters: ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerList> {
        const response = await this.listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind HorizontalPodAutoscaler
     */
    async listAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters: ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerList>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind HorizontalPodAutoscaler
     */
    async listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(requestParameters: ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerList> {
        const response = await this.listAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified HorizontalPodAutoscaler
     */
    async patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters: PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerFromJSON(jsonValue));
    }

    /**
     * partially update the specified HorizontalPodAutoscaler
     */
    async patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(requestParameters: PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler> {
        const response = await this.patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified HorizontalPodAutoscaler
     */
    async patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRaw(requestParameters: PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified HorizontalPodAutoscaler
     */
    async patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(requestParameters: PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler> {
        const response = await this.patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified HorizontalPodAutoscaler
     */
    async readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerFromJSON(jsonValue));
    }

    /**
     * read the specified HorizontalPodAutoscaler
     */
    async readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(requestParameters: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler> {
        const response = await this.readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified HorizontalPodAutoscaler
     */
    async readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRaw(requestParameters: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerFromJSON(jsonValue));
    }

    /**
     * read status of the specified HorizontalPodAutoscaler
     */
    async readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(requestParameters: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler> {
        const response = await this.readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified HorizontalPodAutoscaler
     */
    async replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters: ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerFromJSON(jsonValue));
    }

    /**
     * replace the specified HorizontalPodAutoscaler
     */
    async replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(requestParameters: ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler> {
        const response = await this.replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified HorizontalPodAutoscaler
     */
    async replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRaw(requestParameters: ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest): Promise<runtime.ApiResponse<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiAutoscalingV2beta2HorizontalPodAutoscalerFromJSON(jsonValue));
    }

    /**
     * replace status of the specified HorizontalPodAutoscaler
     */
    async replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(requestParameters: ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest): Promise<IoK8sApiAutoscalingV2beta2HorizontalPodAutoscaler> {
        const response = await this.replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRaw(requestParameters: WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces(requestParameters: WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(requestParameters: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRaw(requestParameters: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList(requestParameters: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRaw(requestParameters);
        return await response.value();
    }

}
