// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import {
    IoK8sApiCertificatesV1beta1CertificateSigningRequest,
    IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON,
    IoK8sApiCertificatesV1beta1CertificateSigningRequestToJSON,
    IoK8sApiCertificatesV1beta1CertificateSigningRequestList,
    IoK8sApiCertificatesV1beta1CertificateSigningRequestListFromJSON,
    IoK8sApiCertificatesV1beta1CertificateSigningRequestListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceList,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptions,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1Status,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEvent,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models/index.ts';

export interface CreateCertificatesV1beta1CertificateSigningRequestRequest {
    body: IoK8sApiCertificatesV1beta1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteCertificatesV1beta1CertificateSigningRequestRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteCertificatesV1beta1CollectionCertificateSigningRequestRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListCertificatesV1beta1CertificateSigningRequestRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchCertificatesV1beta1CertificateSigningRequestRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchCertificatesV1beta1CertificateSigningRequestStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadCertificatesV1beta1CertificateSigningRequestRequest {
    name: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadCertificatesV1beta1CertificateSigningRequestStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceCertificatesV1beta1CertificateSigningRequestRequest {
    name: string;
    body: IoK8sApiCertificatesV1beta1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceCertificatesV1beta1CertificateSigningRequestApprovalRequest {
    name: string;
    body: IoK8sApiCertificatesV1beta1CertificateSigningRequest;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface ReplaceCertificatesV1beta1CertificateSigningRequestStatusRequest {
    name: string;
    body: IoK8sApiCertificatesV1beta1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface WatchCertificatesV1beta1CertificateSigningRequestRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchCertificatesV1beta1CertificateSigningRequestListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * no description
 */
export class CertificatesV1beta1Api extends runtime.BaseAPI {

    /**
     * create a CertificateSigningRequest
     */
    async createCertificatesV1beta1CertificateSigningRequestRaw(requestParameters: CreateCertificatesV1beta1CertificateSigningRequestRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequest>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCertificatesV1beta1CertificateSigningRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiCertificatesV1beta1CertificateSigningRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * create a CertificateSigningRequest
     */
    async createCertificatesV1beta1CertificateSigningRequest(requestParameters: CreateCertificatesV1beta1CertificateSigningRequestRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequest> {
        const response = await this.createCertificatesV1beta1CertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a CertificateSigningRequest
     */
    async deleteCertificatesV1beta1CertificateSigningRequestRaw(requestParameters: DeleteCertificatesV1beta1CertificateSigningRequestRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCertificatesV1beta1CertificateSigningRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a CertificateSigningRequest
     */
    async deleteCertificatesV1beta1CertificateSigningRequest(requestParameters: DeleteCertificatesV1beta1CertificateSigningRequestRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCertificatesV1beta1CertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of CertificateSigningRequest
     */
    async deleteCertificatesV1beta1CollectionCertificateSigningRequestRaw(requestParameters: DeleteCertificatesV1beta1CollectionCertificateSigningRequestRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of CertificateSigningRequest
     */
    async deleteCertificatesV1beta1CollectionCertificateSigningRequest(requestParameters: DeleteCertificatesV1beta1CollectionCertificateSigningRequestRequest): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteCertificatesV1beta1CollectionCertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getCertificatesV1beta1APIResourcesRaw(): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getCertificatesV1beta1APIResources(): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getCertificatesV1beta1APIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind CertificateSigningRequest
     */
    async listCertificatesV1beta1CertificateSigningRequestRaw(requestParameters: ListCertificatesV1beta1CertificateSigningRequestRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequestList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind CertificateSigningRequest
     */
    async listCertificatesV1beta1CertificateSigningRequest(requestParameters: ListCertificatesV1beta1CertificateSigningRequestRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequestList> {
        const response = await this.listCertificatesV1beta1CertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified CertificateSigningRequest
     */
    async patchCertificatesV1beta1CertificateSigningRequestRaw(requestParameters: PatchCertificatesV1beta1CertificateSigningRequestRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCertificatesV1beta1CertificateSigningRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCertificatesV1beta1CertificateSigningRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * partially update the specified CertificateSigningRequest
     */
    async patchCertificatesV1beta1CertificateSigningRequest(requestParameters: PatchCertificatesV1beta1CertificateSigningRequestRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequest> {
        const response = await this.patchCertificatesV1beta1CertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified CertificateSigningRequest
     */
    async patchCertificatesV1beta1CertificateSigningRequestStatusRaw(requestParameters: PatchCertificatesV1beta1CertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchCertificatesV1beta1CertificateSigningRequestStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchCertificatesV1beta1CertificateSigningRequestStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified CertificateSigningRequest
     */
    async patchCertificatesV1beta1CertificateSigningRequestStatus(requestParameters: PatchCertificatesV1beta1CertificateSigningRequestStatusRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequest> {
        const response = await this.patchCertificatesV1beta1CertificateSigningRequestStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified CertificateSigningRequest
     */
    async readCertificatesV1beta1CertificateSigningRequestRaw(requestParameters: ReadCertificatesV1beta1CertificateSigningRequestRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCertificatesV1beta1CertificateSigningRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * read the specified CertificateSigningRequest
     */
    async readCertificatesV1beta1CertificateSigningRequest(requestParameters: ReadCertificatesV1beta1CertificateSigningRequestRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequest> {
        const response = await this.readCertificatesV1beta1CertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified CertificateSigningRequest
     */
    async readCertificatesV1beta1CertificateSigningRequestStatusRaw(requestParameters: ReadCertificatesV1beta1CertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readCertificatesV1beta1CertificateSigningRequestStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * read status of the specified CertificateSigningRequest
     */
    async readCertificatesV1beta1CertificateSigningRequestStatus(requestParameters: ReadCertificatesV1beta1CertificateSigningRequestStatusRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequest> {
        const response = await this.readCertificatesV1beta1CertificateSigningRequestStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified CertificateSigningRequest
     */
    async replaceCertificatesV1beta1CertificateSigningRequestRaw(requestParameters: ReplaceCertificatesV1beta1CertificateSigningRequestRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificatesV1beta1CertificateSigningRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificatesV1beta1CertificateSigningRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiCertificatesV1beta1CertificateSigningRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace the specified CertificateSigningRequest
     */
    async replaceCertificatesV1beta1CertificateSigningRequest(requestParameters: ReplaceCertificatesV1beta1CertificateSigningRequestRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequest> {
        const response = await this.replaceCertificatesV1beta1CertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace approval of the specified CertificateSigningRequest
     */
    async replaceCertificatesV1beta1CertificateSigningRequestApprovalRaw(requestParameters: ReplaceCertificatesV1beta1CertificateSigningRequestApprovalRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificatesV1beta1CertificateSigningRequestApproval.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificatesV1beta1CertificateSigningRequestApproval.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiCertificatesV1beta1CertificateSigningRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace approval of the specified CertificateSigningRequest
     */
    async replaceCertificatesV1beta1CertificateSigningRequestApproval(requestParameters: ReplaceCertificatesV1beta1CertificateSigningRequestApprovalRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequest> {
        const response = await this.replaceCertificatesV1beta1CertificateSigningRequestApprovalRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified CertificateSigningRequest
     */
    async replaceCertificatesV1beta1CertificateSigningRequestStatusRaw(requestParameters: ReplaceCertificatesV1beta1CertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<IoK8sApiCertificatesV1beta1CertificateSigningRequest>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceCertificatesV1beta1CertificateSigningRequestStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceCertificatesV1beta1CertificateSigningRequestStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiCertificatesV1beta1CertificateSigningRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiCertificatesV1beta1CertificateSigningRequestFromJSON(jsonValue));
    }

    /**
     * replace status of the specified CertificateSigningRequest
     */
    async replaceCertificatesV1beta1CertificateSigningRequestStatus(requestParameters: ReplaceCertificatesV1beta1CertificateSigningRequestStatusRequest): Promise<IoK8sApiCertificatesV1beta1CertificateSigningRequest> {
        const response = await this.replaceCertificatesV1beta1CertificateSigningRequestStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch changes to an object of kind CertificateSigningRequest. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCertificatesV1beta1CertificateSigningRequestRaw(requestParameters: WatchCertificatesV1beta1CertificateSigningRequestRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchCertificatesV1beta1CertificateSigningRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind CertificateSigningRequest. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchCertificatesV1beta1CertificateSigningRequest(requestParameters: WatchCertificatesV1beta1CertificateSigningRequestRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCertificatesV1beta1CertificateSigningRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * watch individual changes to a list of CertificateSigningRequest. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCertificatesV1beta1CertificateSigningRequestListRaw(requestParameters: WatchCertificatesV1beta1CertificateSigningRequestListRequest): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of CertificateSigningRequest. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchCertificatesV1beta1CertificateSigningRequestList(requestParameters: WatchCertificatesV1beta1CertificateSigningRequestListRequest): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchCertificatesV1beta1CertificateSigningRequestListRaw(requestParameters);
        return await response.value();
    }

}
