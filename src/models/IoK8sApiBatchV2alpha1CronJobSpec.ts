// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import {
    IoK8sApiBatchV2alpha1JobTemplateSpec,
    IoK8sApiBatchV2alpha1JobTemplateSpecFromJSON,
    IoK8sApiBatchV2alpha1JobTemplateSpecToJSON,
} from './index.ts';

/**
 * CronJobSpec describes how the job execution will look like and when it will actually run.
 * @export
 * @interface IoK8sApiBatchV2alpha1CronJobSpec
 */
export interface IoK8sApiBatchV2alpha1CronJobSpec {
    /**
     * Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn\'t finished yet; - \"Replace\": cancels currently running job and replaces it with a new one
     * @type {string}
     * @memberof IoK8sApiBatchV2alpha1CronJobSpec
     */
    concurrencyPolicy?: string;
    /**
     * The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
     * @type {number}
     * @memberof IoK8sApiBatchV2alpha1CronJobSpec
     */
    failedJobsHistoryLimit?: number;
    /**
     * 
     * @type {IoK8sApiBatchV2alpha1JobTemplateSpec}
     * @memberof IoK8sApiBatchV2alpha1CronJobSpec
     */
    jobTemplate: IoK8sApiBatchV2alpha1JobTemplateSpec;
    /**
     * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
     * @type {string}
     * @memberof IoK8sApiBatchV2alpha1CronJobSpec
     */
    schedule: string;
    /**
     * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
     * @type {number}
     * @memberof IoK8sApiBatchV2alpha1CronJobSpec
     */
    startingDeadlineSeconds?: number;
    /**
     * The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
     * @type {number}
     * @memberof IoK8sApiBatchV2alpha1CronJobSpec
     */
    successfulJobsHistoryLimit?: number;
    /**
     * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
     * @type {boolean}
     * @memberof IoK8sApiBatchV2alpha1CronJobSpec
     */
    suspend?: boolean;
}

export function IoK8sApiBatchV2alpha1CronJobSpecFromJSON(json: any): IoK8sApiBatchV2alpha1CronJobSpec {
    return {
        'concurrencyPolicy': !exists(json, 'concurrencyPolicy') ? undefined : json['concurrencyPolicy'],
        'failedJobsHistoryLimit': !exists(json, 'failedJobsHistoryLimit') ? undefined : json['failedJobsHistoryLimit'],
        'jobTemplate': IoK8sApiBatchV2alpha1JobTemplateSpecFromJSON(json['jobTemplate']),
        'schedule': json['schedule'],
        'startingDeadlineSeconds': !exists(json, 'startingDeadlineSeconds') ? undefined : json['startingDeadlineSeconds'],
        'successfulJobsHistoryLimit': !exists(json, 'successfulJobsHistoryLimit') ? undefined : json['successfulJobsHistoryLimit'],
        'suspend': !exists(json, 'suspend') ? undefined : json['suspend'],
    };
}

export function IoK8sApiBatchV2alpha1CronJobSpecToJSON(value?: IoK8sApiBatchV2alpha1CronJobSpec): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'concurrencyPolicy': value.concurrencyPolicy,
        'failedJobsHistoryLimit': value.failedJobsHistoryLimit,
        'jobTemplate': IoK8sApiBatchV2alpha1JobTemplateSpecToJSON(value.jobTemplate),
        'schedule': value.schedule,
        'startingDeadlineSeconds': value.startingDeadlineSeconds,
        'successfulJobsHistoryLimit': value.successfulJobsHistoryLimit,
        'suspend': value.suspend,
    };
}


