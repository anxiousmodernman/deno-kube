// tslint:disable
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition,
    IoK8sApiCertificatesV1beta1CertificateSigningRequestConditionFromJSON,
    IoK8sApiCertificatesV1beta1CertificateSigningRequestConditionToJSON,
} from './';

/**
 * 
 * @export
 * @interface IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus
 */
export interface IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus {
    /**
     * If request was approved, the controller will place the issued certificate here.
     * @type {string}
     * @memberof IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus
     */
    certificate?: string;
    /**
     * Conditions applied to the request, such as approval or denial.
     * @type {Array<IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition>}
     * @memberof IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus
     */
    conditions?: Array<IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition>;
}

export function IoK8sApiCertificatesV1beta1CertificateSigningRequestStatusFromJSON(json: any): IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus {
    return {
        'certificate': !exists(json, 'certificate') ? undefined : json['certificate'],
        'conditions': !exists(json, 'conditions') ? undefined : (json['conditions'] as Array<any>).map(IoK8sApiCertificatesV1beta1CertificateSigningRequestConditionFromJSON),
    };
}

export function IoK8sApiCertificatesV1beta1CertificateSigningRequestStatusToJSON(value?: IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'certificate': value.certificate,
        'conditions': value.conditions === undefined ? undefined : (value.conditions as Array<any>).map(IoK8sApiCertificatesV1beta1CertificateSigningRequestConditionToJSON),
    };
}


